// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisEventHandler
class NativeIrisEventBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeIrisEventBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeIrisEventBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int RtmInitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _RtmInitDartApiDL(
      data,
    );
  }

  late final _RtmInitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'RtmInitDartApiDL');
  late final _RtmInitDartApiDL =
      _RtmInitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void RtmDispose() {
    return _RtmDispose();
  }

  late final _RtmDisposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('RtmDispose');
  late final _RtmDispose = _RtmDisposePtr.asFunction<void Function()>();

  void RtmOnEvent(
    ffi.Pointer<EventParam> param,
  ) {
    return _RtmOnEvent(
      param,
    );
  }

  late final _RtmOnEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EventParam>)>>(
          'RtmOnEvent');
  late final _RtmOnEvent =
      _RtmOnEventPtr.asFunction<void Function(ffi.Pointer<EventParam>)>();

  void RtmRegisterDartPort(
    int send_port,
  ) {
    return _RtmRegisterDartPort(
      send_port,
    );
  }

  late final _RtmRegisterDartPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'RtmRegisterDartPort');
  late final _RtmRegisterDartPort =
      _RtmRegisterDartPortPtr.asFunction<void Function(int)>();

  void RtmUnregisterDartPort(
    int send_port,
  ) {
    return _RtmUnregisterDartPort(
      send_port,
    );
  }

  late final _RtmUnregisterDartPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'RtmUnregisterDartPort');
  late final _RtmUnregisterDartPort =
      _RtmUnregisterDartPortPtr.asFunction<void Function(int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final NativeIrisEventBinding _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EventParam>)>>
      get RtmOnEvent => _library._RtmOnEventPtr;
}

final class EventParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> event;

  external ffi.Pointer<ffi.Int8> data;

  @ffi.Uint32()
  external int data_size;

  external ffi.Pointer<ffi.Int8> result;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> buffer;

  external ffi.Pointer<ffi.Uint32> length;

  @ffi.Uint32()
  external int buffer_count;
}

const int kBasicResultLength = 65536;
