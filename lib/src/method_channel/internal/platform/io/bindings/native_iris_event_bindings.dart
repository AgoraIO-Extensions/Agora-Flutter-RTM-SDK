// ignore_for_file: camel_case_types, non_constant_identifier_names, public_member_api_docs, sort_constructors_first

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisEventHandler
class NativeIrisEventBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeIrisEventBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeIrisEventBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'InitDartApiDL');
  late final _InitDartApiDL =
      _InitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void Dispose() {
    return _Dispose();
  }

  late final _DisposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dispose');
  late final _Dispose = _DisposePtr.asFunction<void Function()>();

  void OnEvent(
    ffi.Pointer<EventParam> param,
  ) {
    return _OnEvent(
      param,
    );
  }

  late final _OnEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EventParam>)>>(
          'OnEvent');
  late final _OnEvent =
      _OnEventPtr.asFunction<void Function(ffi.Pointer<EventParam>)>();

  void OnEventLegacy(
    ffi.Pointer<ffi.Int8> event,
    ffi.Pointer<ffi.Int8> data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
    ffi.Pointer<ffi.Uint32> length,
    int buffer_count,
  ) {
    return _OnEventLegacy(
      event,
      data,
      buffer,
      length,
      buffer_count,
    );
  }

  late final _OnEventLegacyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('OnEventLegacy');
  late final _OnEventLegacy = _OnEventLegacyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Uint32>, int)>();

  void OnEventExLegacy(
    ffi.Pointer<ffi.Int8> event,
    ffi.Pointer<ffi.Int8> data,
    ffi.Pointer<ffi.Int8> result,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
    ffi.Pointer<ffi.Uint32> length,
    int buffer_count,
  ) {
    return _OnEventExLegacy(
      event,
      data,
      result,
      buffer,
      length,
      buffer_count,
    );
  }

  late final _OnEventExLegacyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>>('OnEventExLegacy');
  late final _OnEventExLegacy = _OnEventExLegacyPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Uint32>,
          int)>();

  void RegisterDartPort(
    int send_port,
  ) {
    return _RegisterDartPort(
      send_port,
    );
  }

  late final _RegisterDartPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'RegisterDartPort');
  late final _RegisterDartPort =
      _RegisterDartPortPtr.asFunction<void Function(int)>();

  void UnregisterDartPort(
    int send_port,
  ) {
    return _UnregisterDartPort(
      send_port,
    );
  }

  late final _UnregisterDartPortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'UnregisterDartPort');
  late final _UnregisterDartPort =
      _UnregisterDartPortPtr.asFunction<void Function(int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final NativeIrisEventBinding _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EventParam>)>>
      get OnEvent => _library._OnEventPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>> get OnEventLegacy => _library._OnEventLegacyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Uint32>,
              ffi.Uint32)>> get OnEventExLegacy => _library._OnEventExLegacyPtr;
}

final class EventParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> event;

  external ffi.Pointer<ffi.Int8> data;

  @ffi.Uint32()
  external int data_size;

  external ffi.Pointer<ffi.Int8> result;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> buffer;

  external ffi.Pointer<ffi.Uint32> length;

  @ffi.Uint32()
  external int buffer_count;
}

const int kBasicResultLength = 65536;
