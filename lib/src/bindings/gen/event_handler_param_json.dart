/// GENERATED BY terra, DO NOT MODIFY BY HAND.

// ignore_for_file: public_member_api_docs, unused_local_variable, unused_import, prefer_is_empty

import 'package:agora_rtm/src/binding_forward_export.dart';
part 'event_handler_param_json.g.dart';

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnLinkStateEventJson {
  const RtmEventHandlerOnLinkStateEventJson({this.event});

  @JsonKey(name: 'event')
  final LinkStateEvent? event;

  factory RtmEventHandlerOnLinkStateEventJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnLinkStateEventJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnLinkStateEventJsonToJson(this);
}

extension RtmEventHandlerOnLinkStateEventJsonBufferExt
    on RtmEventHandlerOnLinkStateEventJson {
  RtmEventHandlerOnLinkStateEventJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnMessageEventJson {
  const RtmEventHandlerOnMessageEventJson({this.event});

  @JsonKey(name: 'event')
  final MessageEvent? event;

  factory RtmEventHandlerOnMessageEventJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnMessageEventJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnMessageEventJsonToJson(this);
}

extension RtmEventHandlerOnMessageEventJsonBufferExt
    on RtmEventHandlerOnMessageEventJson {
  RtmEventHandlerOnMessageEventJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnPresenceEventJson {
  const RtmEventHandlerOnPresenceEventJson({this.event});

  @JsonKey(name: 'event')
  final PresenceEvent? event;

  factory RtmEventHandlerOnPresenceEventJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnPresenceEventJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnPresenceEventJsonToJson(this);
}

extension RtmEventHandlerOnPresenceEventJsonBufferExt
    on RtmEventHandlerOnPresenceEventJson {
  RtmEventHandlerOnPresenceEventJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnTopicEventJson {
  const RtmEventHandlerOnTopicEventJson({this.event});

  @JsonKey(name: 'event')
  final TopicEvent? event;

  factory RtmEventHandlerOnTopicEventJson.fromJson(Map<String, dynamic> json) =>
      _$RtmEventHandlerOnTopicEventJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnTopicEventJsonToJson(this);
}

extension RtmEventHandlerOnTopicEventJsonBufferExt
    on RtmEventHandlerOnTopicEventJson {
  RtmEventHandlerOnTopicEventJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnLockEventJson {
  const RtmEventHandlerOnLockEventJson({this.event});

  @JsonKey(name: 'event')
  final LockEvent? event;

  factory RtmEventHandlerOnLockEventJson.fromJson(Map<String, dynamic> json) =>
      _$RtmEventHandlerOnLockEventJsonFromJson(json);

  Map<String, dynamic> toJson() => _$RtmEventHandlerOnLockEventJsonToJson(this);
}

extension RtmEventHandlerOnLockEventJsonBufferExt
    on RtmEventHandlerOnLockEventJson {
  RtmEventHandlerOnLockEventJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnStorageEventJson {
  const RtmEventHandlerOnStorageEventJson({this.event});

  @JsonKey(name: 'event')
  final StorageEvent? event;

  factory RtmEventHandlerOnStorageEventJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnStorageEventJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnStorageEventJsonToJson(this);
}

extension RtmEventHandlerOnStorageEventJsonBufferExt
    on RtmEventHandlerOnStorageEventJson {
  RtmEventHandlerOnStorageEventJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnJoinResultJson {
  const RtmEventHandlerOnJoinResultJson(
      {this.requestId, this.channelName, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnJoinResultJson.fromJson(Map<String, dynamic> json) =>
      _$RtmEventHandlerOnJoinResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnJoinResultJsonToJson(this);
}

extension RtmEventHandlerOnJoinResultJsonBufferExt
    on RtmEventHandlerOnJoinResultJson {
  RtmEventHandlerOnJoinResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnLeaveResultJson {
  const RtmEventHandlerOnLeaveResultJson(
      {this.requestId, this.channelName, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnLeaveResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnLeaveResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnLeaveResultJsonToJson(this);
}

extension RtmEventHandlerOnLeaveResultJsonBufferExt
    on RtmEventHandlerOnLeaveResultJson {
  RtmEventHandlerOnLeaveResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnPublishTopicMessageResultJson {
  const RtmEventHandlerOnPublishTopicMessageResultJson(
      {this.requestId, this.channelName, this.topic, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'topic')
  final String? topic;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnPublishTopicMessageResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnPublishTopicMessageResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnPublishTopicMessageResultJsonToJson(this);
}

extension RtmEventHandlerOnPublishTopicMessageResultJsonBufferExt
    on RtmEventHandlerOnPublishTopicMessageResultJson {
  RtmEventHandlerOnPublishTopicMessageResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnJoinTopicResultJson {
  const RtmEventHandlerOnJoinTopicResultJson(
      {this.requestId,
      this.channelName,
      this.userId,
      this.topic,
      this.meta,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'topic')
  final String? topic;

  @JsonKey(name: 'meta')
  final String? meta;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnJoinTopicResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnJoinTopicResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnJoinTopicResultJsonToJson(this);
}

extension RtmEventHandlerOnJoinTopicResultJsonBufferExt
    on RtmEventHandlerOnJoinTopicResultJson {
  RtmEventHandlerOnJoinTopicResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnLeaveTopicResultJson {
  const RtmEventHandlerOnLeaveTopicResultJson(
      {this.requestId,
      this.channelName,
      this.userId,
      this.topic,
      this.meta,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'topic')
  final String? topic;

  @JsonKey(name: 'meta')
  final String? meta;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnLeaveTopicResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnLeaveTopicResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnLeaveTopicResultJsonToJson(this);
}

extension RtmEventHandlerOnLeaveTopicResultJsonBufferExt
    on RtmEventHandlerOnLeaveTopicResultJson {
  RtmEventHandlerOnLeaveTopicResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnSubscribeTopicResultJson {
  const RtmEventHandlerOnSubscribeTopicResultJson(
      {this.requestId,
      this.channelName,
      this.userId,
      this.topic,
      this.succeedUsers,
      this.failedUsers,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'topic')
  final String? topic;

  @JsonKey(name: 'succeedUsers')
  final UserList? succeedUsers;

  @JsonKey(name: 'failedUsers')
  final UserList? failedUsers;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnSubscribeTopicResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnSubscribeTopicResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnSubscribeTopicResultJsonToJson(this);
}

extension RtmEventHandlerOnSubscribeTopicResultJsonBufferExt
    on RtmEventHandlerOnSubscribeTopicResultJson {
  RtmEventHandlerOnSubscribeTopicResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnUnsubscribeTopicResultJson {
  const RtmEventHandlerOnUnsubscribeTopicResultJson(
      {this.requestId, this.channelName, this.topic, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'topic')
  final String? topic;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnUnsubscribeTopicResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnUnsubscribeTopicResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnUnsubscribeTopicResultJsonToJson(this);
}

extension RtmEventHandlerOnUnsubscribeTopicResultJsonBufferExt
    on RtmEventHandlerOnUnsubscribeTopicResultJson {
  RtmEventHandlerOnUnsubscribeTopicResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnGetSubscribedUserListResultJson {
  const RtmEventHandlerOnGetSubscribedUserListResultJson(
      {this.requestId,
      this.channelName,
      this.topic,
      this.users,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'topic')
  final String? topic;

  @JsonKey(name: 'users')
  final UserList? users;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnGetSubscribedUserListResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnGetSubscribedUserListResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnGetSubscribedUserListResultJsonToJson(this);
}

extension RtmEventHandlerOnGetSubscribedUserListResultJsonBufferExt
    on RtmEventHandlerOnGetSubscribedUserListResultJson {
  RtmEventHandlerOnGetSubscribedUserListResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnConnectionStateChangedJson {
  const RtmEventHandlerOnConnectionStateChangedJson(
      {this.channelName, this.state, this.reason});

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'state')
  final RtmConnectionState? state;

  @JsonKey(name: 'reason')
  final RtmConnectionChangeReason? reason;

  factory RtmEventHandlerOnConnectionStateChangedJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnConnectionStateChangedJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnConnectionStateChangedJsonToJson(this);
}

extension RtmEventHandlerOnConnectionStateChangedJsonBufferExt
    on RtmEventHandlerOnConnectionStateChangedJson {
  RtmEventHandlerOnConnectionStateChangedJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnTokenPrivilegeWillExpireJson {
  const RtmEventHandlerOnTokenPrivilegeWillExpireJson({this.channelName});

  @JsonKey(name: 'channelName')
  final String? channelName;

  factory RtmEventHandlerOnTokenPrivilegeWillExpireJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnTokenPrivilegeWillExpireJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnTokenPrivilegeWillExpireJsonToJson(this);
}

extension RtmEventHandlerOnTokenPrivilegeWillExpireJsonBufferExt
    on RtmEventHandlerOnTokenPrivilegeWillExpireJson {
  RtmEventHandlerOnTokenPrivilegeWillExpireJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnSubscribeResultJson {
  const RtmEventHandlerOnSubscribeResultJson(
      {this.requestId, this.channelName, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnSubscribeResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnSubscribeResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnSubscribeResultJsonToJson(this);
}

extension RtmEventHandlerOnSubscribeResultJsonBufferExt
    on RtmEventHandlerOnSubscribeResultJson {
  RtmEventHandlerOnSubscribeResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnUnsubscribeResultJson {
  const RtmEventHandlerOnUnsubscribeResultJson(
      {this.requestId, this.channelName, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnUnsubscribeResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnUnsubscribeResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnUnsubscribeResultJsonToJson(this);
}

extension RtmEventHandlerOnUnsubscribeResultJsonBufferExt
    on RtmEventHandlerOnUnsubscribeResultJson {
  RtmEventHandlerOnUnsubscribeResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnPublishResultJson {
  const RtmEventHandlerOnPublishResultJson({this.requestId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnPublishResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnPublishResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnPublishResultJsonToJson(this);
}

extension RtmEventHandlerOnPublishResultJsonBufferExt
    on RtmEventHandlerOnPublishResultJson {
  RtmEventHandlerOnPublishResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnLoginResultJson {
  const RtmEventHandlerOnLoginResultJson({this.requestId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnLoginResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnLoginResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnLoginResultJsonToJson(this);
}

extension RtmEventHandlerOnLoginResultJsonBufferExt
    on RtmEventHandlerOnLoginResultJson {
  RtmEventHandlerOnLoginResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnLogoutResultJson {
  const RtmEventHandlerOnLogoutResultJson({this.requestId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnLogoutResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnLogoutResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnLogoutResultJsonToJson(this);
}

extension RtmEventHandlerOnLogoutResultJsonBufferExt
    on RtmEventHandlerOnLogoutResultJson {
  RtmEventHandlerOnLogoutResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnRenewTokenResultJson {
  const RtmEventHandlerOnRenewTokenResultJson(
      {this.requestId, this.serverType, this.channelName, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'serverType')
  final RtmServiceType? serverType;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnRenewTokenResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnRenewTokenResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnRenewTokenResultJsonToJson(this);
}

extension RtmEventHandlerOnRenewTokenResultJsonBufferExt
    on RtmEventHandlerOnRenewTokenResultJson {
  RtmEventHandlerOnRenewTokenResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnSetChannelMetadataResultJson {
  const RtmEventHandlerOnSetChannelMetadataResultJson(
      {this.requestId, this.channelName, this.channelType, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnSetChannelMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnSetChannelMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnSetChannelMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnSetChannelMetadataResultJsonBufferExt
    on RtmEventHandlerOnSetChannelMetadataResultJson {
  RtmEventHandlerOnSetChannelMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnUpdateChannelMetadataResultJson {
  const RtmEventHandlerOnUpdateChannelMetadataResultJson(
      {this.requestId, this.channelName, this.channelType, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnUpdateChannelMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnUpdateChannelMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnUpdateChannelMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnUpdateChannelMetadataResultJsonBufferExt
    on RtmEventHandlerOnUpdateChannelMetadataResultJson {
  RtmEventHandlerOnUpdateChannelMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnRemoveChannelMetadataResultJson {
  const RtmEventHandlerOnRemoveChannelMetadataResultJson(
      {this.requestId, this.channelName, this.channelType, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnRemoveChannelMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnRemoveChannelMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnRemoveChannelMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnRemoveChannelMetadataResultJsonBufferExt
    on RtmEventHandlerOnRemoveChannelMetadataResultJson {
  RtmEventHandlerOnRemoveChannelMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnGetChannelMetadataResultJson {
  const RtmEventHandlerOnGetChannelMetadataResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.data,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'data')
  final Metadata? data;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnGetChannelMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnGetChannelMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnGetChannelMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnGetChannelMetadataResultJsonBufferExt
    on RtmEventHandlerOnGetChannelMetadataResultJson {
  RtmEventHandlerOnGetChannelMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnSetUserMetadataResultJson {
  const RtmEventHandlerOnSetUserMetadataResultJson(
      {this.requestId, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnSetUserMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnSetUserMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnSetUserMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnSetUserMetadataResultJsonBufferExt
    on RtmEventHandlerOnSetUserMetadataResultJson {
  RtmEventHandlerOnSetUserMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnUpdateUserMetadataResultJson {
  const RtmEventHandlerOnUpdateUserMetadataResultJson(
      {this.requestId, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnUpdateUserMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnUpdateUserMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnUpdateUserMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnUpdateUserMetadataResultJsonBufferExt
    on RtmEventHandlerOnUpdateUserMetadataResultJson {
  RtmEventHandlerOnUpdateUserMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnRemoveUserMetadataResultJson {
  const RtmEventHandlerOnRemoveUserMetadataResultJson(
      {this.requestId, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnRemoveUserMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnRemoveUserMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnRemoveUserMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnRemoveUserMetadataResultJsonBufferExt
    on RtmEventHandlerOnRemoveUserMetadataResultJson {
  RtmEventHandlerOnRemoveUserMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnGetUserMetadataResultJson {
  const RtmEventHandlerOnGetUserMetadataResultJson(
      {this.requestId, this.userId, this.data, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'data')
  final Metadata? data;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnGetUserMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnGetUserMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnGetUserMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnGetUserMetadataResultJsonBufferExt
    on RtmEventHandlerOnGetUserMetadataResultJson {
  RtmEventHandlerOnGetUserMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnSubscribeUserMetadataResultJson {
  const RtmEventHandlerOnSubscribeUserMetadataResultJson(
      {this.requestId, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnSubscribeUserMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnSubscribeUserMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnSubscribeUserMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnSubscribeUserMetadataResultJsonBufferExt
    on RtmEventHandlerOnSubscribeUserMetadataResultJson {
  RtmEventHandlerOnSubscribeUserMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnUnsubscribeUserMetadataResultJson {
  const RtmEventHandlerOnUnsubscribeUserMetadataResultJson(
      {this.requestId, this.userId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userId')
  final String? userId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnUnsubscribeUserMetadataResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnUnsubscribeUserMetadataResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnUnsubscribeUserMetadataResultJsonToJson(this);
}

extension RtmEventHandlerOnUnsubscribeUserMetadataResultJsonBufferExt
    on RtmEventHandlerOnUnsubscribeUserMetadataResultJson {
  RtmEventHandlerOnUnsubscribeUserMetadataResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnSetLockResultJson {
  const RtmEventHandlerOnSetLockResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.lockName,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'lockName')
  final String? lockName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnSetLockResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnSetLockResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnSetLockResultJsonToJson(this);
}

extension RtmEventHandlerOnSetLockResultJsonBufferExt
    on RtmEventHandlerOnSetLockResultJson {
  RtmEventHandlerOnSetLockResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnRemoveLockResultJson {
  const RtmEventHandlerOnRemoveLockResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.lockName,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'lockName')
  final String? lockName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnRemoveLockResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnRemoveLockResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnRemoveLockResultJsonToJson(this);
}

extension RtmEventHandlerOnRemoveLockResultJsonBufferExt
    on RtmEventHandlerOnRemoveLockResultJson {
  RtmEventHandlerOnRemoveLockResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnReleaseLockResultJson {
  const RtmEventHandlerOnReleaseLockResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.lockName,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'lockName')
  final String? lockName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnReleaseLockResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnReleaseLockResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnReleaseLockResultJsonToJson(this);
}

extension RtmEventHandlerOnReleaseLockResultJsonBufferExt
    on RtmEventHandlerOnReleaseLockResultJson {
  RtmEventHandlerOnReleaseLockResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnAcquireLockResultJson {
  const RtmEventHandlerOnAcquireLockResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.lockName,
      this.errorCode,
      this.errorDetails});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'lockName')
  final String? lockName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  @JsonKey(name: 'errorDetails')
  final String? errorDetails;

  factory RtmEventHandlerOnAcquireLockResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnAcquireLockResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnAcquireLockResultJsonToJson(this);
}

extension RtmEventHandlerOnAcquireLockResultJsonBufferExt
    on RtmEventHandlerOnAcquireLockResultJson {
  RtmEventHandlerOnAcquireLockResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnRevokeLockResultJson {
  const RtmEventHandlerOnRevokeLockResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.lockName,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'lockName')
  final String? lockName;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnRevokeLockResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnRevokeLockResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnRevokeLockResultJsonToJson(this);
}

extension RtmEventHandlerOnRevokeLockResultJsonBufferExt
    on RtmEventHandlerOnRevokeLockResultJson {
  RtmEventHandlerOnRevokeLockResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnGetLocksResultJson {
  const RtmEventHandlerOnGetLocksResultJson(
      {this.requestId,
      this.channelName,
      this.channelType,
      this.lockDetailList,
      this.count,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channelName')
  final String? channelName;

  @JsonKey(name: 'channelType')
  final RtmChannelType? channelType;

  @JsonKey(name: 'lockDetailList')
  final List<LockDetail>? lockDetailList;

  @JsonKey(name: 'count')
  final int? count;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnGetLocksResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnGetLocksResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnGetLocksResultJsonToJson(this);
}

extension RtmEventHandlerOnGetLocksResultJsonBufferExt
    on RtmEventHandlerOnGetLocksResultJson {
  RtmEventHandlerOnGetLocksResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnWhoNowResultJson {
  const RtmEventHandlerOnWhoNowResultJson(
      {this.requestId,
      this.userStateList,
      this.count,
      this.nextPage,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userStateList')
  final List<UserState>? userStateList;

  @JsonKey(name: 'count')
  final int? count;

  @JsonKey(name: 'nextPage')
  final String? nextPage;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnWhoNowResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnWhoNowResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnWhoNowResultJsonToJson(this);
}

extension RtmEventHandlerOnWhoNowResultJsonBufferExt
    on RtmEventHandlerOnWhoNowResultJson {
  RtmEventHandlerOnWhoNowResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnGetOnlineUsersResultJson {
  const RtmEventHandlerOnGetOnlineUsersResultJson(
      {this.requestId,
      this.userStateList,
      this.count,
      this.nextPage,
      this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'userStateList')
  final List<UserState>? userStateList;

  @JsonKey(name: 'count')
  final int? count;

  @JsonKey(name: 'nextPage')
  final String? nextPage;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnGetOnlineUsersResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnGetOnlineUsersResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnGetOnlineUsersResultJsonToJson(this);
}

extension RtmEventHandlerOnGetOnlineUsersResultJsonBufferExt
    on RtmEventHandlerOnGetOnlineUsersResultJson {
  RtmEventHandlerOnGetOnlineUsersResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnWhereNowResultJson {
  const RtmEventHandlerOnWhereNowResultJson(
      {this.requestId, this.channels, this.count, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channels')
  final List<ChannelInfo>? channels;

  @JsonKey(name: 'count')
  final int? count;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnWhereNowResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnWhereNowResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnWhereNowResultJsonToJson(this);
}

extension RtmEventHandlerOnWhereNowResultJsonBufferExt
    on RtmEventHandlerOnWhereNowResultJson {
  RtmEventHandlerOnWhereNowResultJson fillBuffers(List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnGetUserChannelsResultJson {
  const RtmEventHandlerOnGetUserChannelsResultJson(
      {this.requestId, this.channels, this.count, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'channels')
  final ChannelInfo? channels;

  @JsonKey(name: 'count')
  final int? count;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnGetUserChannelsResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnGetUserChannelsResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnGetUserChannelsResultJsonToJson(this);
}

extension RtmEventHandlerOnGetUserChannelsResultJsonBufferExt
    on RtmEventHandlerOnGetUserChannelsResultJson {
  RtmEventHandlerOnGetUserChannelsResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnPresenceSetStateResultJson {
  const RtmEventHandlerOnPresenceSetStateResultJson(
      {this.requestId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnPresenceSetStateResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnPresenceSetStateResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnPresenceSetStateResultJsonToJson(this);
}

extension RtmEventHandlerOnPresenceSetStateResultJsonBufferExt
    on RtmEventHandlerOnPresenceSetStateResultJson {
  RtmEventHandlerOnPresenceSetStateResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnPresenceRemoveStateResultJson {
  const RtmEventHandlerOnPresenceRemoveStateResultJson(
      {this.requestId, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnPresenceRemoveStateResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnPresenceRemoveStateResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnPresenceRemoveStateResultJsonToJson(this);
}

extension RtmEventHandlerOnPresenceRemoveStateResultJsonBufferExt
    on RtmEventHandlerOnPresenceRemoveStateResultJson {
  RtmEventHandlerOnPresenceRemoveStateResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}

@JsonSerializable(explicitToJson: true, includeIfNull: false)
class RtmEventHandlerOnPresenceGetStateResultJson {
  const RtmEventHandlerOnPresenceGetStateResultJson(
      {this.requestId, this.state, this.errorCode});

  @JsonKey(name: 'requestId')
  final int? requestId;

  @JsonKey(name: 'state')
  final UserState? state;

  @JsonKey(name: 'errorCode')
  final RtmErrorCode? errorCode;

  factory RtmEventHandlerOnPresenceGetStateResultJson.fromJson(
          Map<String, dynamic> json) =>
      _$RtmEventHandlerOnPresenceGetStateResultJsonFromJson(json);

  Map<String, dynamic> toJson() =>
      _$RtmEventHandlerOnPresenceGetStateResultJsonToJson(this);
}

extension RtmEventHandlerOnPresenceGetStateResultJsonBufferExt
    on RtmEventHandlerOnPresenceGetStateResultJson {
  RtmEventHandlerOnPresenceGetStateResultJson fillBuffers(
      List<Uint8List> bufferList) {
    if (bufferList.isEmpty) return this;
    return this;
  }

  List<Uint8List> collectBufferList() {
    final bufferList = <Uint8List>[];
    return bufferList;
  }
}
