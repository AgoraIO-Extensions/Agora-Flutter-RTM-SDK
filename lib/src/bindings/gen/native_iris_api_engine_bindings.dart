// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisApiEngine
class NativeIrisApiEngineBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeIrisApiEngineBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeIrisApiEngineBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief Create an IrisRtmEngine object and return the handle value of
  /// the object.
  ///
  /// @param client The handle value of an exist RtmClient object.
  /// @return
  /// - zero value for failed.
  /// - nonzero value for success.
  IrisHandle CreateIrisRtmEngine(
    IrisHandle client,
  ) {
    return _CreateIrisRtmEngine(
      client,
    );
  }

  late final _CreateIrisRtmEnginePtr =
      _lookup<ffi.NativeFunction<IrisHandle Function(IrisHandle)>>(
          'CreateIrisRtmEngine');
  late final _CreateIrisRtmEngine =
      _CreateIrisRtmEnginePtr.asFunction<IrisHandle Function(IrisHandle)>();

  IrisHandle CreateIrisRtmEngineWithProcTable(
    ffi.Pointer<ProcTableRtm> procTable,
  ) {
    return _CreateIrisRtmEngineWithProcTable(
      procTable,
    );
  }

  late final _CreateIrisRtmEngineWithProcTablePtr = _lookup<
          ffi.NativeFunction<IrisHandle Function(ffi.Pointer<ProcTableRtm>)>>(
      'CreateIrisRtmEngineWithProcTable');
  late final _CreateIrisRtmEngineWithProcTable =
      _CreateIrisRtmEngineWithProcTablePtr.asFunction<
          IrisHandle Function(ffi.Pointer<ProcTableRtm>)>();

  /// @brief Destroy an IrisRtmEngine object.
  ///
  /// @param engine The handle value of IrisRtmEngine object.
  void DestroyIrisRtmEngine(
    IrisHandle engine,
  ) {
    return _DestroyIrisRtmEngine(
      engine,
    );
  }

  late final _DestroyIrisRtmEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisHandle)>>(
          'DestroyIrisRtmEngine');
  late final _DestroyIrisRtmEngine =
      _DestroyIrisRtmEnginePtr.asFunction<void Function(IrisHandle)>();

  /// @brief Call api function with specified IrisRtmEngine.
  ///
  /// @param engine The handle value of an IrisRtmEngine
  /// @param param The pointer to an ApiParam object.
  /// @return
  /// - 0: Success.
  /// - < 0 : Failure.
  int CallIrisRtmApi(
    IrisHandle engine,
    ffi.Pointer<ApiParam> param,
  ) {
    return _CallIrisRtmApi(
      engine,
      param,
    );
  }

  late final _CallIrisRtmApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisHandle, ffi.Pointer<ApiParam>)>>('CallIrisRtmApi');
  late final _CallIrisRtmApi = _CallIrisRtmApiPtr.asFunction<
      int Function(IrisHandle, ffi.Pointer<ApiParam>)>();

  /// @brief Create an IrisEventHandler object.
  ///
  /// @param handler
  /// @return The handle value of created event handler.
  IrisEventHandlerHandle CreateIrisRtmEventHandler(
    ffi.Pointer<IrisCEventHandler> handler,
  ) {
    return _CreateIrisRtmEventHandler(
      handler,
    );
  }

  late final _CreateIrisRtmEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          IrisEventHandlerHandle Function(
              ffi.Pointer<IrisCEventHandler>)>>('CreateIrisRtmEventHandler');
  late final _CreateIrisRtmEventHandler =
      _CreateIrisRtmEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(ffi.Pointer<IrisCEventHandler>)>();

  /// @brief Destroy the IrisEventHandler object with specified handle value.
  ///
  /// @param handler The handle value of an IrisEventHandler.
  void DestroyIrisRtmEventHandler(
    IrisEventHandlerHandle handler,
  ) {
    return _DestroyIrisRtmEventHandler(
      handler,
    );
  }

  late final _DestroyIrisRtmEventHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisEventHandlerHandle)>>(
          'DestroyIrisRtmEventHandler');
  late final _DestroyIrisRtmEventHandler = _DestroyIrisRtmEventHandlerPtr
      .asFunction<void Function(IrisEventHandlerHandle)>();

  /// @brief Convert error code to error string.
  ///
  /// @param error_code Received error code.
  /// @return The error string.
  ffi.Pointer<ffi.Int8> GetIrisRtmErrorReason(
    int error_code,
  ) {
    return _GetIrisRtmErrorReason(
      error_code,
    );
  }

  late final _GetIrisRtmErrorReasonPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>(
          'GetIrisRtmErrorReason');
  late final _GetIrisRtmErrorReason = _GetIrisRtmErrorReasonPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int)>();

  /// @brief Get the version info of the Agora RTM SDK.
  ///
  /// @return The version info of the Agora RTM SDK.
  ffi.Pointer<ffi.Int8> GetIrisRtmVersion() {
    return _GetIrisRtmVersion();
  }

  late final _GetIrisRtmVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'GetIrisRtmVersion');
  late final _GetIrisRtmVersion =
      _GetIrisRtmVersionPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();
}

final class ProcTableRtm extends ffi.Struct {
  external CreateAgoraRtmClient createAgoraRtmClient;
}

typedef CreateAgoraRtmClient = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>;
typedef IrisHandle = ffi.Pointer<ffi.Void>;
typedef ApiParam = EventParam;

final class EventParam extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> event;

  external ffi.Pointer<ffi.Int8> data;

  @ffi.Uint32()
  external int data_size;

  external ffi.Pointer<ffi.Int8> result;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> buffer;

  external ffi.Pointer<ffi.Uint32> length;

  @ffi.Uint32()
  external int buffer_count;
}

typedef IrisEventHandlerHandle = IrisHandle;

final class IrisCEventHandler extends ffi.Struct {
  external Func_Event OnEvent;
}

typedef Func_Event = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EventParam>)>>;
