/// GENERATED BY terra, DO NOT MODIFY BY HAND.

// ignore_for_file: public_member_api_docs, unused_local_variable, unused_import

import 'binding_forward_export.dart';
// import 'package:agora_rtc_engine/src/binding/impl_forward_export.dart';
import 'package:iris_method_channel/iris_method_channel.dart';

class RtmEventHandlerWrapper implements EventLoopEventHandler {
  const RtmEventHandlerWrapper(this.rtmEventHandler);

  final RtmEventHandler rtmEventHandler;

  @override
  bool operator ==(Object other) {
    if (other.runtimeType != runtimeType) {
      return false;
    }
    return other is RtmEventHandlerWrapper &&
        other.rtmEventHandler == rtmEventHandler;
  }

  @override
  int get hashCode => rtmEventHandler.hashCode;

  @override
  bool handleEventInternal(
      String eventName, String eventData, List<Uint8List> buffers) {
    switch (eventName) {
      case 'onLinkStateEvent_6d5317f':
        if (rtmEventHandler.onLinkStateEvent == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnLinkStateEventJson paramJson =
            RtmEventHandlerOnLinkStateEventJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        LinkStateEvent? event = paramJson.event;
        if (event == null) {
          return true;
        }
        event = event.fillBuffers(buffers);
        rtmEventHandler.onLinkStateEvent!(event);
        return true;

      case 'onMessageEvent_ce5f8f5':
        if (rtmEventHandler.onMessageEvent == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnMessageEventJson paramJson =
            RtmEventHandlerOnMessageEventJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        MessageEvent? event = paramJson.event;
        if (event == null) {
          return true;
        }
        event = event.fillBuffers(buffers);
        rtmEventHandler.onMessageEvent!(event);
        return true;

      case 'onPresenceEvent_32b5db1':
        if (rtmEventHandler.onPresenceEvent == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnPresenceEventJson paramJson =
            RtmEventHandlerOnPresenceEventJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        PresenceEvent? event = paramJson.event;
        if (event == null) {
          return true;
        }
        event = event.fillBuffers(buffers);
        rtmEventHandler.onPresenceEvent!(event);
        return true;

      case 'onTopicEvent_b4e4bd7':
        if (rtmEventHandler.onTopicEvent == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnTopicEventJson paramJson =
            RtmEventHandlerOnTopicEventJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        TopicEvent? event = paramJson.event;
        if (event == null) {
          return true;
        }
        event = event.fillBuffers(buffers);
        rtmEventHandler.onTopicEvent!(event);
        return true;

      case 'onLockEvent_5e7fbef':
        if (rtmEventHandler.onLockEvent == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnLockEventJson paramJson =
            RtmEventHandlerOnLockEventJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        LockEvent? event = paramJson.event;
        if (event == null) {
          return true;
        }
        event = event.fillBuffers(buffers);
        rtmEventHandler.onLockEvent!(event);
        return true;

      case 'onStorageEvent_4304228':
        if (rtmEventHandler.onStorageEvent == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnStorageEventJson paramJson =
            RtmEventHandlerOnStorageEventJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        StorageEvent? event = paramJson.event;
        if (event == null) {
          return true;
        }
        event = event.fillBuffers(buffers);
        rtmEventHandler.onStorageEvent!(event);
        return true;

      case 'onJoinResult_ce14e01':
        if (rtmEventHandler.onJoinResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnJoinResultJson paramJson =
            RtmEventHandlerOnJoinResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            userId == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onJoinResult!(
            requestId, channelName, userId, errorCode);
        return true;

      case 'onLeaveResult_ce14e01':
        if (rtmEventHandler.onLeaveResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnLeaveResultJson paramJson =
            RtmEventHandlerOnLeaveResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            userId == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onLeaveResult!(
            requestId, channelName, userId, errorCode);
        return true;

      case 'onPublishTopicMessageResult_ce14e01':
        if (rtmEventHandler.onPublishTopicMessageResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnPublishTopicMessageResultJson paramJson =
            RtmEventHandlerOnPublishTopicMessageResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? topic = paramJson.topic;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            topic == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onPublishTopicMessageResult!(
            requestId, channelName, topic, errorCode);
        return true;

      case 'onJoinTopicResult_bfd472e':
        if (rtmEventHandler.onJoinTopicResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnJoinTopicResultJson paramJson =
            RtmEventHandlerOnJoinTopicResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? userId = paramJson.userId;
        String? topic = paramJson.topic;
        String? meta = paramJson.meta;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            userId == null ||
            topic == null ||
            meta == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onJoinTopicResult!(
            requestId, channelName, userId, topic, meta, errorCode);
        return true;

      case 'onLeaveTopicResult_bfd472e':
        if (rtmEventHandler.onLeaveTopicResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnLeaveTopicResultJson paramJson =
            RtmEventHandlerOnLeaveTopicResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? userId = paramJson.userId;
        String? topic = paramJson.topic;
        String? meta = paramJson.meta;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            userId == null ||
            topic == null ||
            meta == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onLeaveTopicResult!(
            requestId, channelName, userId, topic, meta, errorCode);
        return true;

      case 'onSubscribeTopicResult_ae281ad':
        if (rtmEventHandler.onSubscribeTopicResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnSubscribeTopicResultJson paramJson =
            RtmEventHandlerOnSubscribeTopicResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? userId = paramJson.userId;
        String? topic = paramJson.topic;
        UserList? succeedUsers = paramJson.succeedUsers;
        UserList? failedUsers = paramJson.failedUsers;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            userId == null ||
            topic == null ||
            succeedUsers == null ||
            failedUsers == null ||
            errorCode == null) {
          return true;
        }
        succeedUsers = succeedUsers.fillBuffers(buffers);
        failedUsers = failedUsers.fillBuffers(buffers);
        rtmEventHandler.onSubscribeTopicResult!(requestId, channelName, userId,
            topic, succeedUsers, failedUsers, errorCode);
        return true;

      case 'onUnsubscribeTopicResult_ce14e01':
        if (rtmEventHandler.onUnsubscribeTopicResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnUnsubscribeTopicResultJson paramJson =
            RtmEventHandlerOnUnsubscribeTopicResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? topic = paramJson.topic;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            topic == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onUnsubscribeTopicResult!(
            requestId, channelName, topic, errorCode);
        return true;

      case 'onGetSubscribedUserListResult_79f7ec8':
        if (rtmEventHandler.onGetSubscribedUserListResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnGetSubscribedUserListResultJson paramJson =
            RtmEventHandlerOnGetSubscribedUserListResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        String? topic = paramJson.topic;
        UserList? users = paramJson.users;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            topic == null ||
            users == null ||
            errorCode == null) {
          return true;
        }
        users = users.fillBuffers(buffers);
        rtmEventHandler.onGetSubscribedUserListResult!(
            requestId, channelName, topic, users, errorCode);
        return true;

      case 'onConnectionStateChanged_ac0fd53':
        if (rtmEventHandler.onConnectionStateChanged == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnConnectionStateChangedJson paramJson =
            RtmEventHandlerOnConnectionStateChangedJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        String? channelName = paramJson.channelName;
        RtmConnectionState? state = paramJson.state;
        RtmConnectionChangeReason? reason = paramJson.reason;
        if (channelName == null || state == null || reason == null) {
          return true;
        }

        rtmEventHandler.onConnectionStateChanged!(channelName, state, reason);
        return true;

      case 'onTokenPrivilegeWillExpire_3a2037f':
        if (rtmEventHandler.onTokenPrivilegeWillExpire == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnTokenPrivilegeWillExpireJson paramJson =
            RtmEventHandlerOnTokenPrivilegeWillExpireJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        String? channelName = paramJson.channelName;
        if (channelName == null) {
          return true;
        }

        rtmEventHandler.onTokenPrivilegeWillExpire!(channelName);
        return true;

      case 'onSubscribeResult_edf84fc':
        if (rtmEventHandler.onSubscribeResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnSubscribeResultJson paramJson =
            RtmEventHandlerOnSubscribeResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || channelName == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onSubscribeResult!(requestId, channelName, errorCode);
        return true;

      case 'onUnsubscribeResult_edf84fc':
        if (rtmEventHandler.onUnsubscribeResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnUnsubscribeResultJson paramJson =
            RtmEventHandlerOnUnsubscribeResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || channelName == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onUnsubscribeResult!(requestId, channelName, errorCode);
        return true;

      case 'onPublishResult_4f46899':
        if (rtmEventHandler.onPublishResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnPublishResultJson paramJson =
            RtmEventHandlerOnPublishResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onPublishResult!(requestId, errorCode);
        return true;

      case 'onLoginResult_4f46899':
        if (rtmEventHandler.onLoginResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnLoginResultJson paramJson =
            RtmEventHandlerOnLoginResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onLoginResult!(requestId, errorCode);
        return true;

      case 'onLogoutResult_4f46899':
        if (rtmEventHandler.onLogoutResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnLogoutResultJson paramJson =
            RtmEventHandlerOnLogoutResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onLogoutResult!(requestId, errorCode);
        return true;

      case 'onRenewTokenResult_e9203be':
        if (rtmEventHandler.onRenewTokenResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnRenewTokenResultJson paramJson =
            RtmEventHandlerOnRenewTokenResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        RtmServiceType? serverType = paramJson.serverType;
        String? channelName = paramJson.channelName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            serverType == null ||
            channelName == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onRenewTokenResult!(
            requestId, serverType, channelName, errorCode);
        return true;

      case 'onSetChannelMetadataResult_7cb1a6e':
        if (rtmEventHandler.onSetChannelMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnSetChannelMetadataResultJson paramJson =
            RtmEventHandlerOnSetChannelMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onSetChannelMetadataResult!(
            requestId, channelName, channelType, errorCode);
        return true;

      case 'onUpdateChannelMetadataResult_7cb1a6e':
        if (rtmEventHandler.onUpdateChannelMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnUpdateChannelMetadataResultJson paramJson =
            RtmEventHandlerOnUpdateChannelMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onUpdateChannelMetadataResult!(
            requestId, channelName, channelType, errorCode);
        return true;

      case 'onRemoveChannelMetadataResult_7cb1a6e':
        if (rtmEventHandler.onRemoveChannelMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnRemoveChannelMetadataResultJson paramJson =
            RtmEventHandlerOnRemoveChannelMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onRemoveChannelMetadataResult!(
            requestId, channelName, channelType, errorCode);
        return true;

      case 'onGetChannelMetadataResult_d105bb5':
        if (rtmEventHandler.onGetChannelMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnGetChannelMetadataResultJson paramJson =
            RtmEventHandlerOnGetChannelMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        Metadata? data = paramJson.data;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            data == null ||
            errorCode == null) {
          return true;
        }
        data = data.fillBuffers(buffers);
        rtmEventHandler.onGetChannelMetadataResult!(
            requestId, channelName, channelType, data, errorCode);
        return true;

      case 'onSetUserMetadataResult_edf84fc':
        if (rtmEventHandler.onSetUserMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnSetUserMetadataResultJson paramJson =
            RtmEventHandlerOnSetUserMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || userId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onSetUserMetadataResult!(requestId, userId, errorCode);
        return true;

      case 'onUpdateUserMetadataResult_edf84fc':
        if (rtmEventHandler.onUpdateUserMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnUpdateUserMetadataResultJson paramJson =
            RtmEventHandlerOnUpdateUserMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || userId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onUpdateUserMetadataResult!(
            requestId, userId, errorCode);
        return true;

      case 'onRemoveUserMetadataResult_edf84fc':
        if (rtmEventHandler.onRemoveUserMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnRemoveUserMetadataResultJson paramJson =
            RtmEventHandlerOnRemoveUserMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || userId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onRemoveUserMetadataResult!(
            requestId, userId, errorCode);
        return true;

      case 'onGetUserMetadataResult_7065706':
        if (rtmEventHandler.onGetUserMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnGetUserMetadataResultJson paramJson =
            RtmEventHandlerOnGetUserMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? userId = paramJson.userId;
        Metadata? data = paramJson.data;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            userId == null ||
            data == null ||
            errorCode == null) {
          return true;
        }
        data = data.fillBuffers(buffers);
        rtmEventHandler.onGetUserMetadataResult!(
            requestId, userId, data, errorCode);
        return true;

      case 'onSubscribeUserMetadataResult_edf84fc':
        if (rtmEventHandler.onSubscribeUserMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnSubscribeUserMetadataResultJson paramJson =
            RtmEventHandlerOnSubscribeUserMetadataResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || userId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onSubscribeUserMetadataResult!(
            requestId, userId, errorCode);
        return true;

      case 'onUnsubscribeUserMetadataResult_edf84fc':
        if (rtmEventHandler.onUnsubscribeUserMetadataResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnUnsubscribeUserMetadataResultJson paramJson =
            RtmEventHandlerOnUnsubscribeUserMetadataResultJson.fromJson(
                jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? userId = paramJson.userId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || userId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onUnsubscribeUserMetadataResult!(
            requestId, userId, errorCode);
        return true;

      case 'onSetLockResult_01034fa':
        if (rtmEventHandler.onSetLockResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnSetLockResultJson paramJson =
            RtmEventHandlerOnSetLockResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        String? lockName = paramJson.lockName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            lockName == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onSetLockResult!(
            requestId, channelName, channelType, lockName, errorCode);
        return true;

      case 'onRemoveLockResult_01034fa':
        if (rtmEventHandler.onRemoveLockResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnRemoveLockResultJson paramJson =
            RtmEventHandlerOnRemoveLockResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        String? lockName = paramJson.lockName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            lockName == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onRemoveLockResult!(
            requestId, channelName, channelType, lockName, errorCode);
        return true;

      case 'onReleaseLockResult_01034fa':
        if (rtmEventHandler.onReleaseLockResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnReleaseLockResultJson paramJson =
            RtmEventHandlerOnReleaseLockResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        String? lockName = paramJson.lockName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            lockName == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onReleaseLockResult!(
            requestId, channelName, channelType, lockName, errorCode);
        return true;

      case 'onAcquireLockResult_aad7ec0':
        if (rtmEventHandler.onAcquireLockResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnAcquireLockResultJson paramJson =
            RtmEventHandlerOnAcquireLockResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        String? lockName = paramJson.lockName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        String? errorDetails = paramJson.errorDetails;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            lockName == null ||
            errorCode == null ||
            errorDetails == null) {
          return true;
        }

        rtmEventHandler.onAcquireLockResult!(requestId, channelName,
            channelType, lockName, errorCode, errorDetails);
        return true;

      case 'onRevokeLockResult_01034fa':
        if (rtmEventHandler.onRevokeLockResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnRevokeLockResultJson paramJson =
            RtmEventHandlerOnRevokeLockResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        String? lockName = paramJson.lockName;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            lockName == null ||
            errorCode == null) {
          return true;
        }

        rtmEventHandler.onRevokeLockResult!(
            requestId, channelName, channelType, lockName, errorCode);
        return true;

      case 'onGetLocksResult_6e98f5f':
        if (rtmEventHandler.onGetLocksResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnGetLocksResultJson paramJson =
            RtmEventHandlerOnGetLocksResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        String? channelName = paramJson.channelName;
        RtmChannelType? channelType = paramJson.channelType;
        List<LockDetail>? lockDetailList = paramJson.lockDetailList;
        int? count = paramJson.count;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channelName == null ||
            channelType == null ||
            lockDetailList == null ||
            count == null ||
            errorCode == null) {
          return true;
        }
        lockDetailList =
            lockDetailList.map((e) => e.fillBuffers(buffers)).toList();
        rtmEventHandler.onGetLocksResult!(requestId, channelName, channelType,
            lockDetailList, count, errorCode);
        return true;

      case 'onWhoNowResult_b070777':
        if (rtmEventHandler.onWhoNowResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnWhoNowResultJson paramJson =
            RtmEventHandlerOnWhoNowResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        List<UserState>? userStateList = paramJson.userStateList;
        int? count = paramJson.count;
        String? nextPage = paramJson.nextPage;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            userStateList == null ||
            count == null ||
            nextPage == null ||
            errorCode == null) {
          return true;
        }
        userStateList =
            userStateList.map((e) => e.fillBuffers(buffers)).toList();
        rtmEventHandler.onWhoNowResult!(
            requestId, userStateList, count, nextPage, errorCode);
        return true;

      case 'onGetOnlineUsersResult_b070777':
        if (rtmEventHandler.onGetOnlineUsersResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnGetOnlineUsersResultJson paramJson =
            RtmEventHandlerOnGetOnlineUsersResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        List<UserState>? userStateList = paramJson.userStateList;
        int? count = paramJson.count;
        String? nextPage = paramJson.nextPage;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            userStateList == null ||
            count == null ||
            nextPage == null ||
            errorCode == null) {
          return true;
        }
        userStateList =
            userStateList.map((e) => e.fillBuffers(buffers)).toList();
        rtmEventHandler.onGetOnlineUsersResult!(
            requestId, userStateList, count, nextPage, errorCode);
        return true;

      case 'onWhereNowResult_ae64023':
        if (rtmEventHandler.onWhereNowResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnWhereNowResultJson paramJson =
            RtmEventHandlerOnWhereNowResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        List<ChannelInfo>? channels = paramJson.channels;
        int? count = paramJson.count;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channels == null ||
            count == null ||
            errorCode == null) {
          return true;
        }
        channels = channels.map((e) => e.fillBuffers(buffers)).toList();
        rtmEventHandler.onWhereNowResult!(
            requestId, channels, count, errorCode);
        return true;

      case 'onGetUserChannelsResult_ae64023':
        if (rtmEventHandler.onGetUserChannelsResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnGetUserChannelsResultJson paramJson =
            RtmEventHandlerOnGetUserChannelsResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        ChannelInfo? channels = paramJson.channels;
        int? count = paramJson.count;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null ||
            channels == null ||
            count == null ||
            errorCode == null) {
          return true;
        }
        channels = channels.fillBuffers(buffers);
        rtmEventHandler.onGetUserChannelsResult!(
            requestId, channels, count, errorCode);
        return true;

      case 'onPresenceSetStateResult_4f46899':
        if (rtmEventHandler.onPresenceSetStateResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnPresenceSetStateResultJson paramJson =
            RtmEventHandlerOnPresenceSetStateResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onPresenceSetStateResult!(requestId, errorCode);
        return true;

      case 'onPresenceRemoveStateResult_4f46899':
        if (rtmEventHandler.onPresenceRemoveStateResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnPresenceRemoveStateResultJson paramJson =
            RtmEventHandlerOnPresenceRemoveStateResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || errorCode == null) {
          return true;
        }

        rtmEventHandler.onPresenceRemoveStateResult!(requestId, errorCode);
        return true;

      case 'onPresenceGetStateResult_3d764cc':
        if (rtmEventHandler.onPresenceGetStateResult == null) {
          return true;
        }
        final jsonMap = jsonDecode(eventData);
        RtmEventHandlerOnPresenceGetStateResultJson paramJson =
            RtmEventHandlerOnPresenceGetStateResultJson.fromJson(jsonMap);
        paramJson = paramJson.fillBuffers(buffers);
        int? requestId = paramJson.requestId;
        UserState? state = paramJson.state;
        RtmErrorCode? errorCode = paramJson.errorCode;
        if (requestId == null || state == null || errorCode == null) {
          return true;
        }
        state = state.fillBuffers(buffers);
        rtmEventHandler.onPresenceGetStateResult!(requestId, state, errorCode);
        return true;
    }
    return false;
  }

  @override
  bool handleEvent(
      String eventName, String eventData, List<Uint8List> buffers) {
    if (!eventName.startsWith('RtmEventHandler')) return false;
    final newEvent = eventName.replaceFirst('RtmEventHandler_', '');
    if (handleEventInternal(newEvent, eventData, buffers)) {
      return true;
    }
    return false;
  }
}
