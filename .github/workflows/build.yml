name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_call:
    secrets:
      MY_APP_ID:
        required: true

jobs:
  pub_publish_check:
    name: Flutter codestyle/analyze check
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Check Dart Format
        run: bash scripts/dart_pub_publish_check.sh
      - uses: axel-op/dart-package-analyzer@v3
        id: analysis
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Check scores
        env:
          TOTAL: ${{ steps.analysis.outputs.total }}
          TOTAL_MAX: ${{ steps.analysis.outputs.total_max }}
        run: |
          if (( $TOTAL_MAX - $TOTAL > 30 ))
          then
            echo Pub Score too low.
            exit 1
          fi

  flutter_ut:
    name: Flutter unit test
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Run flutter test
        run: flutter test
        working-directory: tests/integration_test_app

  # pub_publish_check:
  #   name: pub publish check
  #   if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         channel: 'stable'
  #         cache: true
  #     - run: bash ci/dart_pub_publish_check.sh

  integration_test_android:
    name: Run Flutter Android Integration Tests
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    strategy:
      matrix:
        version: ["3.10.0", "3.24.0"]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      TEST_APP_ID: ${{ secrets.MY_APP_ID }}
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.version }}
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: run flutter android integration tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 31
          arch: x86_64
          profile: pixel_5
          ram-size: 2048M
          heap-size: 4096M
          disk-size: 8192M
          script: bash scripts/run_flutter_integration_test.sh "android"

  integration_test_ios:
    name: Run Flutter iOS Integration Tests
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    strategy:
      matrix:
        version: ["3.10.0", "3.16"]
    runs-on: macos-12
    timeout-minutes: 120
    env:
      TEST_APP_ID: ${{ secrets.MY_APP_ID }}
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.version }}
          cache: true
      - uses: futureware-tech/simulator-action@v3
        with:
          model: 'iPhone 14 Pro Max'
      - run: |
          brew install coreutils
          bash scripts/run_flutter_integration_test.sh "ios"
      - name: Get ios crash logs
        if: always()
        run: |
          sleep 30

          mkdir logs-ios

          CRASH_DIR="${HOME}/Library/Logs/DiagnosticReports/"
          OUTPUT_CRASH_DIR=./logs-ios/crash
          mkdir -p ${OUTPUT_CRASH_DIR}

          # Copy all files
          cp -RP $CRASH_DIR* $OUTPUT_CRASH_DIR
        
      - name: Upload ios logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: logs-ios-${{ matrix.version }}
          path: logs-ios/*

  # integration_test_macos:
  #   name: Run Flutter macOS Integration Tests
  #   if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
  #   strategy:
  #     matrix:
  #       version: ["3.10.0", "3.24.0"]
  #   runs-on: macos-12
  #   timeout-minutes: 120
  #   env:
  #     TEST_APP_ID: ${{ secrets.MY_APP_ID }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ matrix.version }}
  #         cache: true
  #     - run: flutter config --enable-macos-desktop
  #     - run: bash ci/run_flutter_macos_integration_test.sh
  #     - name: Get iris logs macos
  #       if: always()
  #       run: |
  #         sleep 30

  #         mkdir iris-logs-macos
  #         if [ -f "${HOME}/Library/Containers/com.example.fakeTestApp/Data/Library/agora-iris.log" ]; then
  #           cp -RP ${HOME}/Library/Containers/com.example.fakeTestApp/Data/Library/agora-iris.log ./iris-logs-macos/agora-iris-fake-test.log
  #         fi
  #         if [ -f "${HOME}/Library/Containers/com.example.integrationTestApp/Data/Library/agora-iris.log" ]; then
  #           cp -RP ${HOME}/Library/Containers/com.example.integrationTestApp/Data/Library/agora-iris.log ./iris-logs-macos/agora-iris-integration-test.log
  #         fi

  #         CRASH_DIR="${HOME}/Library/Logs/DiagnosticReports/"
  #         OUTPUT_CRASH_DIR=./iris-logs-macos/crash
  #         mkdir -p ${OUTPUT_CRASH_DIR}

  #         # Copy all files
  #         cp -RP $CRASH_DIR* $OUTPUT_CRASH_DIR
          
  #     - name: Upload iris logs macos
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: iris-logs-macos-${{ matrix.version }}
  #         path: iris-logs-macos/*

  # integration_test_windows:
  #   name: Run Flutter Windows Integration Tests
  #   if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
  #   strategy:
  #     matrix:
  #       version: ["3.10.0", "3.24.0"]
  #   runs-on: windows-2019
  #   timeout-minutes: 120
  #   env:
  #     TEST_APP_ID: ${{ secrets.MY_APP_ID }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ matrix.version }}
  #         cache: true
  #     - name: Set up crash dump environment
  #       run: .\ci\setup-crash-dumps.ps1
  #       shell: powershell
  #     - run: flutter config --enable-windows-desktop
  #     - name: Run windows integration test
  #       shell: bash
  #       run: |
  #         bash ci/run_flutter_windows_integration_test.sh

  #     - name: Upload crash dumps if exist
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: windows-crash-dumps-${{ matrix.version }}
  #         path: ./CrashDumps/*

  # integration_test_web:
  #   name: Run Flutter Web Integration Tests
  #   if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
  #   strategy:
  #     matrix:
  #       version: ['3.x']
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   env:
  #     TEST_APP_ID: ${{ secrets.MY_APP_ID }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ matrix.version }}
  #         cache: true
  #     - name: Run web integration test
  #       shell: bash
  #       run: |
  #         chromedriver --port=4444 --trace-buffer-size=100000 &
  #         bash ci/run_flutter_integration_test.sh web

  build_android_ubuntu:
    name: Build Android on Ubuntu
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    strategy:
      matrix:
        version: ["3.10.0", "3.24.0"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.version }}
      - run: flutter pub get
      - name: Run flutter build apk
        run: flutter build apk
        working-directory: example

  build_android_windows:
    name: Build Android on Windows
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    strategy:
      matrix:
        version: ["3.10.0", "3.24.0"]
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.version }}
          cache: true
      - run: flutter pub get
      - name: Run flutter build apk
        run: flutter build apk
        working-directory: example

  build_ios:
    name: Build iOS
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    strategy:
      matrix:
        version: ["3.10.0", "3.24.0"]
    runs-on: macos-12
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.version }}
          cache: true
      - run: flutter pub get
      - name: Run flutter build ios --no-codesign
        run: flutter build ios --no-codesign
        working-directory: example

  # # This job aim to cover https://github.com/flutter/flutter/issues/135739
  build_ios_xcode_15:
    name: Build iOS with xcode 15.x
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'ci:skip') }}
    strategy:
      matrix:
        version: ['3.x']
    runs-on: macos-13
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.version }}
          cache: true
      - run: | # https://github.com/actions/runner-images/issues/6746#issuecomment-1380042553
          # set xcode version to use for build
          sudo xcode-select -switch /Applications/Xcode_15.0.1.app
          # Print used xCode version
          xcode-select -print-path
          xcodebuild -version
      - run: flutter pub get
      - name: Run flutter build ios --no-codesign
        run: flutter build ios --no-codesign
        working-directory: example
