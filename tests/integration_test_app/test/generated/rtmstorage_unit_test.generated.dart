/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names,unused_local_variable,unused_import,unnecessary_import

import 'package:agora_rtm/agora_rtm.dart';
import 'package:agora_rtm/src/impl/gen/agora_rtm_storage_impl.dart'
    as rtm_storage_impl;
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'dart:typed_data';

import '../all_mocks.mocks.dart';

void testCases() {
  test(
    'RtmStorage.setChannelMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'setChannelMetadata');
      RtmChannelType theSetChannelMetadataResultChannelType =
          RtmChannelType.none;
      String theSetChannelMetadataResultChannelName = "hello";
      SetChannelMetadataResult theSetChannelMetadataResult =
          SetChannelMetadataResult(
        channelName: theSetChannelMetadataResultChannelName,
        channelType: theSetChannelMetadataResultChannelType,
      );
      final mockResultHandlerReturnValue =
          (theSetChannelMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theSetChannelMetadataResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        int dataMajorRevision = 5;
        List<MetadataItem> dataItems = [];
        int dataItemCount = 5;
        Metadata data = Metadata(
          majorRevision: dataMajorRevision,
          items: dataItems,
          itemCount: dataItemCount,
        );
        bool optionsRecordTs = true;
        bool optionsRecordUserId = true;
        MetadataOptions options = MetadataOptions(
          recordTs: optionsRecordTs,
          recordUserId: optionsRecordUserId,
        );
        String lockName = "hello";
        when(mockRtmStorageNativeBinding.setChannelMetadata(
          channelName: channelName,
          channelType: channelType,
          data: argThat(
            isA<Metadata>(),
            named: 'data',
          ),
          options: argThat(
            isA<MetadataOptions>(),
            named: 'options',
          ),
          lockName: lockName,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      final List<MetadataItem> metadata = () {
        String metadataItemKey = "hello";
        String metadataItemValue = "hello";
        String metadataItemAuthorUserId = "hello";
        int metadataItemRevision = 5;
        int metadataItemUpdateTs = 5;
        MetadataItem metadataItem = MetadataItem(
          key: metadataItemKey,
          value: metadataItemValue,
          authorUserId: metadataItemAuthorUserId,
          revision: metadataItemRevision,
          updateTs: metadataItemUpdateTs,
        );

        return List.filled(5, metadataItem);
      }();

      int majorRevision = 5;
      bool recordTs = true;
      bool recordUserId = true;
      String lockName = "hello";
      final ret = await rtmStorage.setChannelMetadata(
        channelName,
        channelType,
        metadata,
        majorRevision: majorRevision,
        recordTs: recordTs,
        recordUserId: recordUserId,
        lockName: lockName,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.updateChannelMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'updateChannelMetadata');
      RtmChannelType theUpdateChannelMetadataResultChannelType =
          RtmChannelType.none;
      String theUpdateChannelMetadataResultChannelName = "hello";
      UpdateChannelMetadataResult theUpdateChannelMetadataResult =
          UpdateChannelMetadataResult(
        channelName: theUpdateChannelMetadataResultChannelName,
        channelType: theUpdateChannelMetadataResultChannelType,
      );
      final mockResultHandlerReturnValue =
          (theUpdateChannelMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theUpdateChannelMetadataResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        int dataMajorRevision = 5;
        List<MetadataItem> dataItems = [];
        int dataItemCount = 5;
        Metadata data = Metadata(
          majorRevision: dataMajorRevision,
          items: dataItems,
          itemCount: dataItemCount,
        );
        bool optionsRecordTs = true;
        bool optionsRecordUserId = true;
        MetadataOptions options = MetadataOptions(
          recordTs: optionsRecordTs,
          recordUserId: optionsRecordUserId,
        );
        String lockName = "hello";
        when(mockRtmStorageNativeBinding.updateChannelMetadata(
          channelName: channelName,
          channelType: channelType,
          data: argThat(
            isA<Metadata>(),
            named: 'data',
          ),
          options: argThat(
            isA<MetadataOptions>(),
            named: 'options',
          ),
          lockName: lockName,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      final List<MetadataItem> metadata = () {
        String metadataItemKey = "hello";
        String metadataItemValue = "hello";
        String metadataItemAuthorUserId = "hello";
        int metadataItemRevision = 5;
        int metadataItemUpdateTs = 5;
        MetadataItem metadataItem = MetadataItem(
          key: metadataItemKey,
          value: metadataItemValue,
          authorUserId: metadataItemAuthorUserId,
          revision: metadataItemRevision,
          updateTs: metadataItemUpdateTs,
        );

        return List.filled(5, metadataItem);
      }();

      int majorRevision = 5;
      bool recordTs = true;
      bool recordUserId = true;
      String lockName = "hello";
      final ret = await rtmStorage.updateChannelMetadata(
        channelName,
        channelType,
        metadata,
        majorRevision: majorRevision,
        recordTs: recordTs,
        recordUserId: recordUserId,
        lockName: lockName,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.removeChannelMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'removeChannelMetadata');
      RtmChannelType theRemoveChannelMetadataResultChannelType =
          RtmChannelType.none;
      String theRemoveChannelMetadataResultChannelName = "hello";
      RemoveChannelMetadataResult theRemoveChannelMetadataResult =
          RemoveChannelMetadataResult(
        channelName: theRemoveChannelMetadataResultChannelName,
        channelType: theRemoveChannelMetadataResultChannelType,
      );
      final mockResultHandlerReturnValue =
          (theRemoveChannelMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theRemoveChannelMetadataResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        int dataMajorRevision = 5;
        List<MetadataItem> dataItems = [];
        int dataItemCount = 5;
        Metadata data = Metadata(
          majorRevision: dataMajorRevision,
          items: dataItems,
          itemCount: dataItemCount,
        );
        bool optionsRecordTs = true;
        bool optionsRecordUserId = true;
        MetadataOptions options = MetadataOptions(
          recordTs: optionsRecordTs,
          recordUserId: optionsRecordUserId,
        );
        String lockName = "hello";
        when(mockRtmStorageNativeBinding.removeChannelMetadata(
          channelName: channelName,
          channelType: channelType,
          data: argThat(
            isA<Metadata>(),
            named: 'data',
          ),
          options: argThat(
            isA<MetadataOptions>(),
            named: 'options',
          ),
          lockName: lockName,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      int majorRevision = 5;
      final List<MetadataItem> metadata = () {
        String metadataItemKey = "hello";
        String metadataItemValue = "hello";
        String metadataItemAuthorUserId = "hello";
        int metadataItemRevision = 5;
        int metadataItemUpdateTs = 5;
        MetadataItem metadataItem = MetadataItem(
          key: metadataItemKey,
          value: metadataItemValue,
          authorUserId: metadataItemAuthorUserId,
          revision: metadataItemRevision,
          updateTs: metadataItemUpdateTs,
        );

        return List.filled(5, metadataItem);
      }();

      bool recordTs = true;
      bool recordUserId = true;
      String lockName = "hello";
      final ret = await rtmStorage.removeChannelMetadata(
        channelName,
        channelType,
        majorRevision: majorRevision,
        metadata: metadata,
        recordTs: recordTs,
        recordUserId: recordUserId,
        lockName: lockName,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.getChannelMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'getChannelMetadata');
      RtmChannelType theGetChannelMetadataResultChannelType =
          RtmChannelType.none;
      int dataMajorRevision = 5;
      List<MetadataItem> dataItems = [];
      int dataItemCount = 5;
      Metadata theGetChannelMetadataResultData = Metadata(
        majorRevision: dataMajorRevision,
        items: dataItems,
        itemCount: dataItemCount,
      );
      String theGetChannelMetadataResultChannelName = "hello";
      GetChannelMetadataResult theGetChannelMetadataResult =
          GetChannelMetadataResult(
        channelName: theGetChannelMetadataResultChannelName,
        channelType: theGetChannelMetadataResultChannelType,
        data: theGetChannelMetadataResultData,
      );
      final mockResultHandlerReturnValue =
          (theGetChannelMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theGetChannelMetadataResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        when(mockRtmStorageNativeBinding.getChannelMetadata(
          channelName: channelName,
          channelType: channelType,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      final ret = await rtmStorage.getChannelMetadata(
        channelName,
        channelType,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.setUserMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'setUserMetadata');
      String theSetUserMetadataResultUserId = "hello";
      SetUserMetadataResult theSetUserMetadataResult = SetUserMetadataResult(
        userId: theSetUserMetadataResultUserId,
      );
      final mockResultHandlerReturnValue =
          (theSetUserMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theSetUserMetadataResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        int dataMajorRevision = 5;
        List<MetadataItem> dataItems = [];
        int dataItemCount = 5;
        Metadata data = Metadata(
          majorRevision: dataMajorRevision,
          items: dataItems,
          itemCount: dataItemCount,
        );
        bool optionsRecordTs = true;
        bool optionsRecordUserId = true;
        MetadataOptions options = MetadataOptions(
          recordTs: optionsRecordTs,
          recordUserId: optionsRecordUserId,
        );
        when(mockRtmStorageNativeBinding.setUserMetadata(
          userId: userId,
          data: argThat(
            isA<Metadata>(),
            named: 'data',
          ),
          options: argThat(
            isA<MetadataOptions>(),
            named: 'options',
          ),
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final List<MetadataItem> metadata = () {
        String metadataItemKey = "hello";
        String metadataItemValue = "hello";
        String metadataItemAuthorUserId = "hello";
        int metadataItemRevision = 5;
        int metadataItemUpdateTs = 5;
        MetadataItem metadataItem = MetadataItem(
          key: metadataItemKey,
          value: metadataItemValue,
          authorUserId: metadataItemAuthorUserId,
          revision: metadataItemRevision,
          updateTs: metadataItemUpdateTs,
        );

        return List.filled(5, metadataItem);
      }();

      int majorRevision = 5;
      bool recordTs = true;
      bool recordUserId = true;
      final ret = await rtmStorage.setUserMetadata(
        userId,
        metadata,
        majorRevision: majorRevision,
        recordTs: recordTs,
        recordUserId: recordUserId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.updateUserMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'updateUserMetadata');
      String theUpdateUserMetadataResultUserId = "hello";
      UpdateUserMetadataResult theUpdateUserMetadataResult =
          UpdateUserMetadataResult(
        userId: theUpdateUserMetadataResultUserId,
      );
      final mockResultHandlerReturnValue =
          (theUpdateUserMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theUpdateUserMetadataResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        int dataMajorRevision = 5;
        List<MetadataItem> dataItems = [];
        int dataItemCount = 5;
        Metadata data = Metadata(
          majorRevision: dataMajorRevision,
          items: dataItems,
          itemCount: dataItemCount,
        );
        bool optionsRecordTs = true;
        bool optionsRecordUserId = true;
        MetadataOptions options = MetadataOptions(
          recordTs: optionsRecordTs,
          recordUserId: optionsRecordUserId,
        );
        when(mockRtmStorageNativeBinding.updateUserMetadata(
          userId: userId,
          data: argThat(
            isA<Metadata>(),
            named: 'data',
          ),
          options: argThat(
            isA<MetadataOptions>(),
            named: 'options',
          ),
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final List<MetadataItem> metadata = () {
        String metadataItemKey = "hello";
        String metadataItemValue = "hello";
        String metadataItemAuthorUserId = "hello";
        int metadataItemRevision = 5;
        int metadataItemUpdateTs = 5;
        MetadataItem metadataItem = MetadataItem(
          key: metadataItemKey,
          value: metadataItemValue,
          authorUserId: metadataItemAuthorUserId,
          revision: metadataItemRevision,
          updateTs: metadataItemUpdateTs,
        );

        return List.filled(5, metadataItem);
      }();

      int majorRevision = 5;
      bool recordTs = true;
      bool recordUserId = true;
      final ret = await rtmStorage.updateUserMetadata(
        userId,
        metadata,
        majorRevision: majorRevision,
        recordTs: recordTs,
        recordUserId: recordUserId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.removeUserMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'removeUserMetadata');
      String theRemoveUserMetadataResultUserId = "hello";
      RemoveUserMetadataResult theRemoveUserMetadataResult =
          RemoveUserMetadataResult(
        userId: theRemoveUserMetadataResultUserId,
      );
      final mockResultHandlerReturnValue =
          (theRemoveUserMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theRemoveUserMetadataResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        int dataMajorRevision = 5;
        List<MetadataItem> dataItems = [];
        int dataItemCount = 5;
        Metadata data = Metadata(
          majorRevision: dataMajorRevision,
          items: dataItems,
          itemCount: dataItemCount,
        );
        bool optionsRecordTs = true;
        bool optionsRecordUserId = true;
        MetadataOptions options = MetadataOptions(
          recordTs: optionsRecordTs,
          recordUserId: optionsRecordUserId,
        );
        when(mockRtmStorageNativeBinding.removeUserMetadata(
          userId: userId,
          data: argThat(
            isA<Metadata>(),
            named: 'data',
          ),
          options: argThat(
            isA<MetadataOptions>(),
            named: 'options',
          ),
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      int majorRevision = 5;
      final List<MetadataItem> metadata = () {
        String metadataItemKey = "hello";
        String metadataItemValue = "hello";
        String metadataItemAuthorUserId = "hello";
        int metadataItemRevision = 5;
        int metadataItemUpdateTs = 5;
        MetadataItem metadataItem = MetadataItem(
          key: metadataItemKey,
          value: metadataItemValue,
          authorUserId: metadataItemAuthorUserId,
          revision: metadataItemRevision,
          updateTs: metadataItemUpdateTs,
        );

        return List.filled(5, metadataItem);
      }();

      bool recordTs = true;
      bool recordUserId = true;
      final ret = await rtmStorage.removeUserMetadata(
        userId,
        majorRevision: majorRevision,
        metadata: metadata,
        recordTs: recordTs,
        recordUserId: recordUserId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.getUserMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'getUserMetadata');
      int dataMajorRevision = 5;
      List<MetadataItem> dataItems = [];
      int dataItemCount = 5;
      Metadata theGetUserMetadataResultData = Metadata(
        majorRevision: dataMajorRevision,
        items: dataItems,
        itemCount: dataItemCount,
      );
      String theGetUserMetadataResultUserId = "hello";
      GetUserMetadataResult theGetUserMetadataResult = GetUserMetadataResult(
        userId: theGetUserMetadataResultUserId,
        data: theGetUserMetadataResultData,
      );
      final mockResultHandlerReturnValue =
          (theGetUserMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theGetUserMetadataResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        when(mockRtmStorageNativeBinding.getUserMetadata(
          userId,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final ret = await rtmStorage.getUserMetadata(
        userId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.subscribeUserMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'subscribeUserMetadata');
      String theSubscribeUserMetadataResultUserId = "hello";
      SubscribeUserMetadataResult theSubscribeUserMetadataResult =
          SubscribeUserMetadataResult(
        userId: theSubscribeUserMetadataResultUserId,
      );
      final mockResultHandlerReturnValue =
          (theSubscribeUserMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theSubscribeUserMetadataResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        when(mockRtmStorageNativeBinding.subscribeUserMetadata(
          userId,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final ret = await rtmStorage.subscribeUserMetadata(
        userId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmStorage.unsubscribeUserMetadata',
    () async {
      final mockRtmStorageNativeBinding = MockRtmStorageImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmStorage rtmStorage = rtm_storage_impl.RtmStorageImpl(
        mockRtmStorageNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'unsubscribeUserMetadata');
      String theUnsubscribeUserMetadataResultUserId = "hello";
      UnsubscribeUserMetadataResult theUnsubscribeUserMetadataResult =
          UnsubscribeUserMetadataResult(
        userId: theUnsubscribeUserMetadataResultUserId,
      );
      final mockResultHandlerReturnValue =
          (theUnsubscribeUserMetadataResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theUnsubscribeUserMetadataResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        when(mockRtmStorageNativeBinding.unsubscribeUserMetadata(
          userId,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final ret = await rtmStorage.unsubscribeUserMetadata(
        userId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );
}
