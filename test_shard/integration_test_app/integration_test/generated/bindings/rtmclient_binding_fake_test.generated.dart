/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names,unused_local_variable,unused_import,unnecessary_import

import 'package:agora_rtm/agora_rtm.dart' show AgoraRtmException;
import 'package:agora_rtm/src/bindings/gen/binding_forward_export.dart';
import 'package:agora_rtm/src/impl/rtm_result_handler_impl.dart';
import 'package:agora_rtm/src/bindings/native_iris_api_engine_binding_delegate.dart';
import 'package:agora_rtm/src/bindings/agora_rtm_client_impl_override.dart';

import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';

import 'package:iris_method_channel/iris_method_channel.dart';

void testCases(
    ValueGetter<List<InitilizationArgProvider>>
        irisMethodChannelInitilizationArgs) {
  Future<RtmClientImplOverride> _createBindingRtmClient() async {
    String appId = const String.fromEnvironment('TEST_APP_ID',
        defaultValue: '<YOUR_APP_ID>');
    final rtmResultHandler = RtmResultHandlerImpl();
    final client = RtmClientImplOverride.create(
      IrisMethodChannel(IrisApiEngineNativeBindingDelegateProvider()),
    );
    await client.initialize(
      appId,
      'user_id',
      rtmResultHandler.rtmEventHandler,
      args: irisMethodChannelInitilizationArgs(),
    );
    return client;
  }

  testWidgets(
    'RtmClient.release',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        await rtmClient.release();
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.release] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.login',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String token = "hello";
        await rtmClient.login(
          token,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.login] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.logout',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        await rtmClient.logout();
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.logout] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.renewToken',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String token = "hello";
        await rtmClient.renewToken(
          token,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.renewToken] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.publish',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String channelName = "hello";
        String message = "hello";
        int length = 5;
        RtmChannelType optionChannelType = RtmChannelType.none;
        RtmMessageType optionMessageType = RtmMessageType.binary;
        String optionCustomType = "hello";
        PublishOptions option = PublishOptions(
          channelType: optionChannelType,
          messageType: optionMessageType,
          customType: optionCustomType,
        );
        await rtmClient.publish(
          channelName: channelName,
          message: message,
          length: length,
          option: option,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.publish] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.subscribe',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String channelName = "hello";
        bool optionsWithMessage = true;
        bool optionsWithMetadata = true;
        bool optionsWithPresence = true;
        bool optionsWithLock = true;
        bool optionsBeQuiet = true;
        SubscribeOptions options = SubscribeOptions(
          withMessage: optionsWithMessage,
          withMetadata: optionsWithMetadata,
          withPresence: optionsWithPresence,
          withLock: optionsWithLock,
          beQuiet: optionsBeQuiet,
        );
        await rtmClient.subscribe(
          channelName: channelName,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.subscribe] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.unsubscribe',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String channelName = "hello";
        await rtmClient.unsubscribe(
          channelName,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.unsubscribe] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.setParameters',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String parameters = "hello";
        await rtmClient.setParameters(
          parameters,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.setParameters] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'RtmClient.publishBinaryMessage',
    (WidgetTester tester) async {
      RtmClient rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');

      try {
        String channelName = "hello";
        Uint8List message = Uint8List.fromList([1, 1, 1, 1, 1]);
        int length = 5;
        RtmChannelType optionChannelType = RtmChannelType.none;
        RtmMessageType optionMessageType = RtmMessageType.binary;
        String optionCustomType = "hello";
        PublishOptions option = PublishOptions(
          channelType: optionChannelType,
          messageType: optionMessageType,
          customType: optionCustomType,
        );
        await rtmClient.publishBinaryMessage(
          channelName: channelName,
          message: message,
          length: length,
          option: option,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[RtmClient.publishBinaryMessage] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );
}
