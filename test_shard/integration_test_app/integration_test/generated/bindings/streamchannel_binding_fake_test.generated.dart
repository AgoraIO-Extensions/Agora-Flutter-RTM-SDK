/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names,unused_local_variable,unused_import,unnecessary_import

import 'package:agora_rtm/agora_rtm.dart' show AgoraRtmException;
import 'package:agora_rtm/src/bindings/gen/binding_forward_export.dart';
import 'package:agora_rtm/src/impl/rtm_result_handler_impl.dart';
import 'package:agora_rtm/src/bindings/native_iris_api_engine_binding_delegate.dart';
import 'package:agora_rtm/src/bindings/agora_rtm_client_impl_override.dart';

import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';

import 'package:iris_method_channel/iris_method_channel.dart';

void testCases(
    ValueGetter<List<InitilizationArgProvider>>
        irisMethodChannelInitilizationArgs) {
  Future<RtmClientImplOverride> _createBindingRtmClient() async {
    String appId = const String.fromEnvironment('TEST_APP_ID',
        defaultValue: '<YOUR_APP_ID>');
    final rtmResultHandler = RtmResultHandlerImpl();
    final client = RtmClientImplOverride.create(
      IrisMethodChannel(IrisApiEngineNativeBindingDelegateProvider()),
    );
    await client.initialize(
      appId,
      'user_id',
      rtmResultHandler.rtmEventHandler,
      args: irisMethodChannelInitilizationArgs(),
    );
    return client;
  }

  testWidgets(
    'StreamChannel.join',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String optionsToken = "hello";
        bool optionsWithMetadata = true;
        bool optionsWithPresence = true;
        bool optionsWithLock = true;
        bool optionsBeQuiet = true;
        JoinChannelOptions options = JoinChannelOptions(
          token: optionsToken,
          withMetadata: optionsWithMetadata,
          withPresence: optionsWithPresence,
          withLock: optionsWithLock,
          beQuiet: optionsBeQuiet,
        );
        await streamChannel.join(
          options,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.join] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.renewToken',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String token = "hello";
        await streamChannel.renewToken(
          token,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.renewToken] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.leave',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        await streamChannel.leave();
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.leave] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.getChannelName',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        await streamChannel.getChannelName();
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.getChannelName] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.joinTopic',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        RtmMessageQos optionsQos = RtmMessageQos.unordered;
        RtmMessagePriority optionsPriority = RtmMessagePriority.highest;
        String optionsMeta = "hello";
        bool optionsSyncWithMedia = true;
        JoinTopicOptions options = JoinTopicOptions(
          qos: optionsQos,
          priority: optionsPriority,
          meta: optionsMeta,
          syncWithMedia: optionsSyncWithMedia,
        );
        await streamChannel.joinTopic(
          topic: topic,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.joinTopic] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.publishTopicMessage',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        String message = "hello";
        int length = 5;
        RtmMessageType optionMessageType = RtmMessageType.binary;
        int optionSendTs = 5;
        String optionCustomType = "hello";
        TopicMessageOptions option = TopicMessageOptions(
          messageType: optionMessageType,
          sendTs: optionSendTs,
          customType: optionCustomType,
        );
        await streamChannel.publishTopicMessage(
          topic: topic,
          message: message,
          length: length,
          option: option,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint(
              '[StreamChannel.publishTopicMessage] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.leaveTopic',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        await streamChannel.leaveTopic(
          topic,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.leaveTopic] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.subscribeTopic',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        List<String> optionsUsers = List.filled(5, "hello");
        int optionsUserCount = 5;
        TopicOptions options = TopicOptions(
          users: optionsUsers,
          userCount: optionsUserCount,
        );
        await streamChannel.subscribeTopic(
          topic: topic,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.subscribeTopic] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.unsubscribeTopic',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        List<String> optionsUsers = List.filled(5, "hello");
        int optionsUserCount = 5;
        TopicOptions options = TopicOptions(
          users: optionsUsers,
          userCount: optionsUserCount,
        );
        await streamChannel.unsubscribeTopic(
          topic: topic,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.unsubscribeTopic] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.getSubscribedUserList',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        await streamChannel.getSubscribedUserList(
          topic,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint(
              '[StreamChannel.getSubscribedUserList] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.release',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        await streamChannel.release();
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint('[StreamChannel.release] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.publishTextMessage',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        String message = "hello";
        int length = 5;
        RtmMessageType optionMessageType = RtmMessageType.binary;
        int optionSendTs = 5;
        String optionCustomType = "hello";
        TopicMessageOptions option = TopicMessageOptions(
          messageType: optionMessageType,
          sendTs: optionSendTs,
          customType: optionCustomType,
        );
        await streamChannel.publishTextMessage(
          topic: topic,
          message: message,
          length: length,
          option: option,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint(
              '[StreamChannel.publishTextMessage] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );

  testWidgets(
    'StreamChannel.publishBinaryMessage',
    (WidgetTester tester) async {
      final rtmClient = await _createBindingRtmClient();
      await rtmClient.setParameters('{"rtm.log_filter":2063}');
      final streamChannel =
          await rtmClient.createStreamChannel('stream_channel');

      try {
        String topic = "hello";
        Uint8List message = Uint8List.fromList([1, 1, 1, 1, 1]);
        int length = 5;
        RtmMessageType optionMessageType = RtmMessageType.binary;
        int optionSendTs = 5;
        String optionCustomType = "hello";
        TopicMessageOptions option = TopicMessageOptions(
          messageType: optionMessageType,
          sendTs: optionSendTs,
          customType: optionCustomType,
        );
        await streamChannel.publishBinaryMessage(
          topic: topic,
          message: message,
          length: length,
          option: option,
        );
      } catch (e) {
        if (e is! AgoraRtmException) {
          debugPrint(
              '[StreamChannel.publishBinaryMessage] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await rtmClient.release();
    },
  );
}
