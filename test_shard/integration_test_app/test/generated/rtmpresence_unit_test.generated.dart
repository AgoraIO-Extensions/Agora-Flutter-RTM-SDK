/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names,unused_local_variable,unused_import,unnecessary_import

import 'package:agora_rtm/agora_rtm.dart';
import 'package:agora_rtm/src/impl/gen/agora_rtm_presence_impl.dart'
    as rtm_presence_impl;
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'dart:typed_data';

import '../all_mocks.mocks.dart';

void testCases() {
  test(
    'RtmPresence.whoNow',
    () async {
      final mockRtmPresenceNativeBinding = MockRtmPresenceImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmPresence rtmPresence = rtm_presence_impl.RtmPresenceImpl(
        mockRtmPresenceNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'whoNow');
      List<UserState> theWhoNowResultUserStateList = [];
      int theWhoNowResultCount = 5;
      String theWhoNowResultNextPage = "hello";
      WhoNowResult theWhoNowResult = WhoNowResult(
        userStateList: theWhoNowResultUserStateList,
        count: theWhoNowResultCount,
        nextPage: theWhoNowResultNextPage,
      );
      final mockResultHandlerReturnValue = (theWhoNowResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue = (rtmStatus, theWhoNowResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        bool optionsIncludeUserId = true;
        bool optionsIncludeState = true;
        String optionsPage = "hello";
        PresenceOptions options = PresenceOptions(
          includeUserId: optionsIncludeUserId,
          includeState: optionsIncludeState,
          page: optionsPage,
        );
        when(mockRtmPresenceNativeBinding.whoNow(
          channelName: channelName,
          channelType: channelType,
          options: argThat(
            isA<PresenceOptions>(),
            named: 'options',
          ),
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      bool includeUserId = true;
      bool includeState = true;
      String page = "hello";
      final ret = await rtmPresence.whoNow(
        channelName,
        channelType,
        includeUserId: includeUserId,
        includeState: includeState,
        page: page,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmPresence.whereNow',
    () async {
      final mockRtmPresenceNativeBinding = MockRtmPresenceImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmPresence rtmPresence = rtm_presence_impl.RtmPresenceImpl(
        mockRtmPresenceNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'whereNow');
      List<ChannelInfo> theWhereNowResultChannels = [];
      int theWhereNowResultCount = 5;
      WhereNowResult theWhereNowResult = WhereNowResult(
        channels: theWhereNowResultChannels,
        count: theWhereNowResultCount,
      );
      final mockResultHandlerReturnValue = (theWhereNowResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue = (rtmStatus, theWhereNowResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        when(mockRtmPresenceNativeBinding.whereNow(
          userId,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final ret = await rtmPresence.whereNow(
        userId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmPresence.removeState',
    () async {
      final mockRtmPresenceNativeBinding = MockRtmPresenceImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmPresence rtmPresence = rtm_presence_impl.RtmPresenceImpl(
        mockRtmPresenceNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'removeState');
      RemoveStateResult theRemoveStateResult = RemoveStateResult();
      final mockResultHandlerReturnValue =
          (theRemoveStateResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theRemoveStateResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        List<String> keys = List.filled(5, "hello");
        int count = 5;
        when(mockRtmPresenceNativeBinding.removeState(
          channelName: channelName,
          channelType: channelType,
          keys: argThat(
            isA<List<String>>(),
            named: 'keys',
          ),
          count: count,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      List<String> states = List.filled(5, "hello");
      final ret = await rtmPresence.removeState(
        channelName,
        channelType,
        states: states,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmPresence.getState',
    () async {
      final mockRtmPresenceNativeBinding = MockRtmPresenceImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmPresence rtmPresence = rtm_presence_impl.RtmPresenceImpl(
        mockRtmPresenceNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'getState');
      String stateUserId = "hello";
      List<StateItem> stateStates = [];
      UserState theGetStateResultState = UserState(
        userId: stateUserId,
        states: stateStates,
      );
      GetStateResult theGetStateResult = GetStateResult(
        state: theGetStateResultState,
      );
      final mockResultHandlerReturnValue = (theGetStateResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue = (rtmStatus, theGetStateResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        String userId = "hello";
        when(mockRtmPresenceNativeBinding.getState(
          channelName: channelName,
          channelType: channelType,
          userId: userId,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      String userId = "hello";
      final ret = await rtmPresence.getState(
        channelName,
        channelType,
        userId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmPresence.getOnlineUsers',
    () async {
      final mockRtmPresenceNativeBinding = MockRtmPresenceImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmPresence rtmPresence = rtm_presence_impl.RtmPresenceImpl(
        mockRtmPresenceNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'getOnlineUsers');
      List<UserState> theGetOnlineUsersResultUserStateList = [];
      int theGetOnlineUsersResultCount = 5;
      String theGetOnlineUsersResultNextPage = "hello";
      GetOnlineUsersResult theGetOnlineUsersResult = GetOnlineUsersResult(
        userStateList: theGetOnlineUsersResultUserStateList,
        count: theGetOnlineUsersResultCount,
        nextPage: theGetOnlineUsersResultNextPage,
      );
      final mockResultHandlerReturnValue =
          (theGetOnlineUsersResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theGetOnlineUsersResult);
      int mockRequestId = 1;
      {
        String channelName = "hello";
        RtmChannelType channelType = RtmChannelType.none;
        bool optionsIncludeUserId = true;
        bool optionsIncludeState = true;
        String optionsPage = "hello";
        GetOnlineUsersOptions options = GetOnlineUsersOptions(
          includeUserId: optionsIncludeUserId,
          includeState: optionsIncludeState,
          page: optionsPage,
        );
        when(mockRtmPresenceNativeBinding.getOnlineUsers(
          channelName: channelName,
          channelType: channelType,
          options: argThat(
            isA<GetOnlineUsersOptions>(),
            named: 'options',
          ),
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String channelName = "hello";
      RtmChannelType channelType = RtmChannelType.none;
      bool includeUserId = true;
      bool includeState = true;
      String page = "hello";
      final ret = await rtmPresence.getOnlineUsers(
        channelName,
        channelType,
        includeUserId: includeUserId,
        includeState: includeState,
        page: page,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );

  test(
    'RtmPresence.getUserChannels',
    () async {
      final mockRtmPresenceNativeBinding = MockRtmPresenceImpl();
      final mockRtmResultHandlerImpl = MockRtmResultHandlerImpl();
      RtmPresence rtmPresence = rtm_presence_impl.RtmPresenceImpl(
        mockRtmPresenceNativeBinding,
        mockRtmResultHandlerImpl,
      );

      const rtmStatus = RtmStatus.success(operation: 'getUserChannels');
      RtmChannelType channelsChannelType = RtmChannelType.none;
      String channelsChannelName = "hello";
      ChannelInfo theGetUserChannelsResultChannels = ChannelInfo(
        channelName: channelsChannelName,
        channelType: channelsChannelType,
      );
      int theGetUserChannelsResultCount = 5;
      GetUserChannelsResult theGetUserChannelsResult = GetUserChannelsResult(
        channels: theGetUserChannelsResultChannels,
        count: theGetUserChannelsResultCount,
      );
      final mockResultHandlerReturnValue =
          (theGetUserChannelsResult, RtmErrorCode.ok);
      final expectedResultHandlerReturnValue =
          (rtmStatus, theGetUserChannelsResult);
      int mockRequestId = 1;
      {
        String userId = "hello";
        when(mockRtmPresenceNativeBinding.getUserChannels(
          userId,
        )).thenAnswer((_) async => mockRequestId);
        when(mockRtmResultHandlerImpl.request(mockRequestId))
            .thenAnswer((_) async => mockResultHandlerReturnValue);
      }

      String userId = "hello";
      final ret = await rtmPresence.getUserChannels(
        userId,
      );
      expect(ret, expectedResultHandlerReturnValue);
    },
  );
}
