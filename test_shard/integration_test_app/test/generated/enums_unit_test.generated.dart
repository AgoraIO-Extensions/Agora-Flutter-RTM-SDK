/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names,unused_local_variable,unused_import,unnecessary_import

import 'package:agora_rtm/agora_rtm.dart';
import 'package:flutter_test/flutter_test.dart';

void testCases() {
  test(
    'RtmLinkState',
    () async {
      for (final e in RtmLinkState.values) {
        expect(RtmLinkState.fromValue(e.value()), isA<RtmLinkState>());
        expect(RtmLinkState.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmLinkOperation',
    () async {
      for (final e in RtmLinkOperation.values) {
        expect(RtmLinkOperation.fromValue(e.value()), isA<RtmLinkOperation>());
        expect(RtmLinkOperation.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmServiceType',
    () async {
      for (final e in RtmServiceType.values) {
        expect(RtmServiceType.fromValue(e.value()), isA<RtmServiceType>());
        expect(RtmServiceType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmLinkStateChangeReason',
    () async {
      for (final e in RtmLinkStateChangeReason.values) {
        expect(RtmLinkStateChangeReason.fromValue(e.value()),
            isA<RtmLinkStateChangeReason>());
        expect(RtmLinkStateChangeReason.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmProtocolType',
    () async {
      for (final e in RtmProtocolType.values) {
        expect(RtmProtocolType.fromValue(e.value()), isA<RtmProtocolType>());
        expect(RtmProtocolType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmAreaCode',
    () async {
      for (final e in RtmAreaCode.values) {
        expect(RtmAreaCode.fromValue(e.value()), isA<RtmAreaCode>());
        expect(RtmAreaCode.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmLogLevel',
    () async {
      for (final e in RtmLogLevel.values) {
        expect(RtmLogLevel.fromValue(e.value()), isA<RtmLogLevel>());
        expect(RtmLogLevel.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmEncryptionMode',
    () async {
      for (final e in RtmEncryptionMode.values) {
        expect(
            RtmEncryptionMode.fromValue(e.value()), isA<RtmEncryptionMode>());
        expect(RtmEncryptionMode.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmErrorCode',
    () async {
      for (final e in RtmErrorCode.values) {
        expect(RtmErrorCode.fromValue(e.value()), isA<RtmErrorCode>());
        expect(RtmErrorCode.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmConnectionState',
    () async {
      for (final e in RtmConnectionState.values) {
        expect(
            RtmConnectionState.fromValue(e.value()), isA<RtmConnectionState>());
        expect(RtmConnectionState.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmConnectionChangeReason',
    () async {
      for (final e in RtmConnectionChangeReason.values) {
        expect(RtmConnectionChangeReason.fromValue(e.value()),
            isA<RtmConnectionChangeReason>());
        expect(RtmConnectionChangeReason.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmChannelType',
    () async {
      for (final e in RtmChannelType.values) {
        expect(RtmChannelType.fromValue(e.value()), isA<RtmChannelType>());
        expect(RtmChannelType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmMessageType',
    () async {
      for (final e in RtmMessageType.values) {
        expect(RtmMessageType.fromValue(e.value()), isA<RtmMessageType>());
        expect(RtmMessageType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmStorageType',
    () async {
      for (final e in RtmStorageType.values) {
        expect(RtmStorageType.fromValue(e.value()), isA<RtmStorageType>());
        expect(RtmStorageType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmStorageEventType',
    () async {
      for (final e in RtmStorageEventType.values) {
        expect(RtmStorageEventType.fromValue(e.value()),
            isA<RtmStorageEventType>());
        expect(RtmStorageEventType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmLockEventType',
    () async {
      for (final e in RtmLockEventType.values) {
        expect(RtmLockEventType.fromValue(e.value()), isA<RtmLockEventType>());
        expect(RtmLockEventType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmProxyType',
    () async {
      for (final e in RtmProxyType.values) {
        expect(RtmProxyType.fromValue(e.value()), isA<RtmProxyType>());
        expect(RtmProxyType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmTopicEventType',
    () async {
      for (final e in RtmTopicEventType.values) {
        expect(
            RtmTopicEventType.fromValue(e.value()), isA<RtmTopicEventType>());
        expect(RtmTopicEventType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmPresenceEventType',
    () async {
      for (final e in RtmPresenceEventType.values) {
        expect(RtmPresenceEventType.fromValue(e.value()),
            isA<RtmPresenceEventType>());
        expect(RtmPresenceEventType.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmMessageQos',
    () async {
      for (final e in RtmMessageQos.values) {
        expect(RtmMessageQos.fromValue(e.value()), isA<RtmMessageQos>());
        expect(RtmMessageQos.fromValue(e.value()) == e, isTrue);
      }
    },
  );

  test(
    'RtmMessagePriority',
    () async {
      for (final e in RtmMessagePriority.values) {
        expect(
            RtmMessagePriority.fromValue(e.value()), isA<RtmMessagePriority>());
        expect(RtmMessagePriority.fromValue(e.value()) == e, isTrue);
      }
    },
  );
}
