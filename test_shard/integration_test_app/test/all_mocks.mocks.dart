// Mocks generated by Mockito 5.4.4 from annotations
// in integration_test_app/test/all_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i13;
import 'dart:ui' as _i15;

import 'package:agora_rtm/src/agora_rtm_base.dart' as _i12;
import 'package:agora_rtm/src/agora_rtm_client.dart' as _i11;
import 'package:agora_rtm/src/agora_rtm_client_ext.dart' as _i4;
import 'package:agora_rtm/src/bindings/agora_rtm_client_impl_override.dart'
    as _i9;
import 'package:agora_rtm/src/bindings/gen/agora_rtm_client.dart' as _i7;
import 'package:agora_rtm/src/bindings/gen/agora_stream_channel.dart' as _i5;
import 'package:agora_rtm/src/bindings/gen/binding_forward_export.dart' as _i6;
import 'package:agora_rtm/src/impl/rtm_result_handler_impl.dart' as _i14;
import 'package:flutter/services.dart' as _i2;
import 'package:iris_method_channel/iris_method_channel.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMethodChannel_0 extends _i1.SmartFake implements _i2.MethodChannel {
  _FakeMethodChannel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIrisMethodChannel_1 extends _i1.SmartFake
    implements _i3.IrisMethodChannel {
  _FakeIrisMethodChannel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRtmStatus_2 extends _i1.SmartFake implements _i4.RtmStatus {
  _FakeRtmStatus_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamChannel_3 extends _i1.SmartFake implements _i5.StreamChannel {
  _FakeStreamChannel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRtmStorage_4 extends _i1.SmartFake implements _i6.RtmStorage {
  _FakeRtmStorage_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRtmLock_5 extends _i1.SmartFake implements _i6.RtmLock {
  _FakeRtmLock_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRtmPresence_6 extends _i1.SmartFake implements _i6.RtmPresence {
  _FakeRtmPresence_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRtmEventHandler_7 extends _i1.SmartFake
    implements _i7.RtmEventHandler {
  _FakeRtmEventHandler_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_8<T1> extends _i1.SmartFake implements _i8.Future<T1> {
  _FakeFuture_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScopedObjects_9 extends _i1.SmartFake implements _i3.ScopedObjects {
  _FakeScopedObjects_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCallApiResult_10 extends _i1.SmartFake implements _i3.CallApiResult {
  _FakeCallApiResult_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIrisMethodChannelInternal_11 extends _i1.SmartFake
    implements _i3.IrisMethodChannelInternal {
  _FakeIrisMethodChannelInternal_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RtmClientImplOverride].
///
/// See the documentation for Mockito's code generation for more information.
class MockRtmClientImplOverride extends _i1.Mock
    implements _i9.RtmClientImplOverride {
  @override
  _i2.MethodChannel get rtmMethodChannel => (super.noSuchMethod(
        Invocation.getter(#rtmMethodChannel),
        returnValue: _FakeMethodChannel_0(
          this,
          Invocation.getter(#rtmMethodChannel),
        ),
        returnValueForMissingStub: _FakeMethodChannel_0(
          this,
          Invocation.getter(#rtmMethodChannel),
        ),
      ) as _i2.MethodChannel);

  @override
  set rtmMethodChannel(_i2.MethodChannel? _rtmMethodChannel) =>
      super.noSuchMethod(
        Invocation.setter(
          #rtmMethodChannel,
          _rtmMethodChannel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.IrisMethodChannel get irisMethodChannel => (super.noSuchMethod(
        Invocation.getter(#irisMethodChannel),
        returnValue: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
      ) as _i3.IrisMethodChannel);

  @override
  bool get isOverrideClassName => (super.noSuchMethod(
        Invocation.getter(#isOverrideClassName),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get className => (super.noSuchMethod(
        Invocation.getter(#className),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
      ) as String);

  @override
  _i8.Future<_i4.RtmStatus> initialize(
    String? appId,
    String? userId,
    _i7.RtmEventHandler? rtmEventHandler, {
    _i11.RtmConfig? config,
    List<_i3.InitilizationArgProvider>? args = const [],
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            appId,
            userId,
            rtmEventHandler,
          ],
          {
            #config: config,
            #args: args,
          },
        ),
        returnValue: _i8.Future<_i4.RtmStatus>.value(_FakeRtmStatus_2(
          this,
          Invocation.method(
            #initialize,
            [
              appId,
              userId,
              rtmEventHandler,
            ],
            {
              #config: config,
              #args: args,
            },
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.RtmStatus>.value(_FakeRtmStatus_2(
          this,
          Invocation.method(
            #initialize,
            [
              appId,
              userId,
              rtmEventHandler,
            ],
            {
              #config: config,
              #args: args,
            },
          ),
        )),
      ) as _i8.Future<_i4.RtmStatus>);

  @override
  _i3.IrisMethodChannel getIrisMethodChannel() => (super.noSuchMethod(
        Invocation.method(
          #getIrisMethodChannel,
          [],
        ),
        returnValue: _FakeIrisMethodChannel_1(
          this,
          Invocation.method(
            #getIrisMethodChannel,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannel_1(
          this,
          Invocation.method(
            #getIrisMethodChannel,
            [],
          ),
        ),
      ) as _i3.IrisMethodChannel);

  @override
  _i8.Future<_i5.StreamChannel> createStreamChannel(String? channelName) =>
      (super.noSuchMethod(
        Invocation.method(
          #createStreamChannel,
          [channelName],
        ),
        returnValue: _i8.Future<_i5.StreamChannel>.value(_FakeStreamChannel_3(
          this,
          Invocation.method(
            #createStreamChannel,
            [channelName],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.StreamChannel>.value(_FakeStreamChannel_3(
          this,
          Invocation.method(
            #createStreamChannel,
            [channelName],
          ),
        )),
      ) as _i8.Future<_i5.StreamChannel>);

  @override
  _i8.Future<void> release() => (super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> publish({
    required String? channelName,
    required String? message,
    required int? length,
    required _i12.PublishOptions? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publish,
          [],
          {
            #channelName: channelName,
            #message: message,
            #length: length,
            #option: option,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  Map<String, dynamic> createParams(Map<String, dynamic>? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #createParams,
          [param],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<int> login(String? token) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [token],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<_i6.RtmStorage> getStorage() => (super.noSuchMethod(
        Invocation.method(
          #getStorage,
          [],
        ),
        returnValue: _i8.Future<_i6.RtmStorage>.value(_FakeRtmStorage_4(
          this,
          Invocation.method(
            #getStorage,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.RtmStorage>.value(_FakeRtmStorage_4(
          this,
          Invocation.method(
            #getStorage,
            [],
          ),
        )),
      ) as _i8.Future<_i6.RtmStorage>);

  @override
  _i8.Future<_i6.RtmLock> getLock() => (super.noSuchMethod(
        Invocation.method(
          #getLock,
          [],
        ),
        returnValue: _i8.Future<_i6.RtmLock>.value(_FakeRtmLock_5(
          this,
          Invocation.method(
            #getLock,
            [],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i6.RtmLock>.value(_FakeRtmLock_5(
          this,
          Invocation.method(
            #getLock,
            [],
          ),
        )),
      ) as _i8.Future<_i6.RtmLock>);

  @override
  _i8.Future<_i6.RtmPresence> getPresence() => (super.noSuchMethod(
        Invocation.method(
          #getPresence,
          [],
        ),
        returnValue: _i8.Future<_i6.RtmPresence>.value(_FakeRtmPresence_6(
          this,
          Invocation.method(
            #getPresence,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.RtmPresence>.value(_FakeRtmPresence_6(
          this,
          Invocation.method(
            #getPresence,
            [],
          ),
        )),
      ) as _i8.Future<_i6.RtmPresence>);

  @override
  _i8.Future<int> renewToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #renewToken,
          [token],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> subscribe({
    required String? channelName,
    required _i12.SubscribeOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
          {
            #channelName: channelName,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> unsubscribe(String? channelName) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [channelName],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<void> setParameters(String? parameters) => (super.noSuchMethod(
        Invocation.method(
          #setParameters,
          [parameters],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> publishBinaryMessage({
    required String? channelName,
    required _i13.Uint8List? message,
    required int? length,
    required _i12.PublishOptions? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishBinaryMessage,
          [],
          {
            #channelName: channelName,
            #message: message,
            #length: length,
            #option: option,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
}

/// A class which mocks [RtmLockImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRtmLockImpl extends _i1.Mock implements _i6.RtmLockImpl {
  @override
  _i3.IrisMethodChannel get irisMethodChannel => (super.noSuchMethod(
        Invocation.getter(#irisMethodChannel),
        returnValue: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
      ) as _i3.IrisMethodChannel);

  @override
  bool get isOverrideClassName => (super.noSuchMethod(
        Invocation.getter(#isOverrideClassName),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get className => (super.noSuchMethod(
        Invocation.getter(#className),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
      ) as String);

  @override
  Map<String, dynamic> createParams(Map<String, dynamic>? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #createParams,
          [param],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<int> setLock({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required String? lockName,
    required int? ttl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLock,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #lockName: lockName,
            #ttl: ttl,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getLocks({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocks,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeLock({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required String? lockName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeLock,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #lockName: lockName,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> acquireLock({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required String? lockName,
    required bool? retry,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #acquireLock,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #lockName: lockName,
            #retry: retry,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> releaseLock({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required String? lockName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #releaseLock,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #lockName: lockName,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> revokeLock({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required String? lockName,
    required String? owner,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeLock,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #lockName: lockName,
            #owner: owner,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
}

/// A class which mocks [RtmPresenceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRtmPresenceImpl extends _i1.Mock implements _i6.RtmPresenceImpl {
  @override
  _i3.IrisMethodChannel get irisMethodChannel => (super.noSuchMethod(
        Invocation.getter(#irisMethodChannel),
        returnValue: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
      ) as _i3.IrisMethodChannel);

  @override
  bool get isOverrideClassName => (super.noSuchMethod(
        Invocation.getter(#isOverrideClassName),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get className => (super.noSuchMethod(
        Invocation.getter(#className),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
      ) as String);

  @override
  Map<String, dynamic> createParams(Map<String, dynamic>? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #createParams,
          [param],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<int> whoNow({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required _i12.PresenceOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #whoNow,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> whereNow(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #whereNow,
          [userId],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> setState({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required List<_i12.StateItem>? items,
    required int? count,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setState,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #items: items,
            #count: count,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeState({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required List<String>? keys,
    required int? count,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeState,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #keys: keys,
            #count: count,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getState({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getState,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #userId: userId,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getOnlineUsers({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required _i12.GetOnlineUsersOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOnlineUsers,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getUserChannels(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserChannels,
          [userId],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
}

/// A class which mocks [RtmStorageImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRtmStorageImpl extends _i1.Mock implements _i6.RtmStorageImpl {
  @override
  _i3.IrisMethodChannel get irisMethodChannel => (super.noSuchMethod(
        Invocation.getter(#irisMethodChannel),
        returnValue: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
      ) as _i3.IrisMethodChannel);

  @override
  bool get isOverrideClassName => (super.noSuchMethod(
        Invocation.getter(#isOverrideClassName),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get className => (super.noSuchMethod(
        Invocation.getter(#className),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
      ) as String);

  @override
  Map<String, dynamic> createParams(Map<String, dynamic>? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #createParams,
          [param],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<int> setChannelMetadata({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required _i6.Metadata? data,
    required _i6.MetadataOptions? options,
    required String? lockName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setChannelMetadata,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #data: data,
            #options: options,
            #lockName: lockName,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> updateChannelMetadata({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required _i6.Metadata? data,
    required _i6.MetadataOptions? options,
    required String? lockName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChannelMetadata,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #data: data,
            #options: options,
            #lockName: lockName,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeChannelMetadata({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
    required _i6.Metadata? data,
    required _i6.MetadataOptions? options,
    required String? lockName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannelMetadata,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
            #data: data,
            #options: options,
            #lockName: lockName,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getChannelMetadata({
    required String? channelName,
    required _i12.RtmChannelType? channelType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannelMetadata,
          [],
          {
            #channelName: channelName,
            #channelType: channelType,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> setUserMetadata({
    required String? userId,
    required _i6.Metadata? data,
    required _i6.MetadataOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserMetadata,
          [],
          {
            #userId: userId,
            #data: data,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> updateUserMetadata({
    required String? userId,
    required _i6.Metadata? data,
    required _i6.MetadataOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserMetadata,
          [],
          {
            #userId: userId,
            #data: data,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> removeUserMetadata({
    required String? userId,
    required _i6.Metadata? data,
    required _i6.MetadataOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeUserMetadata,
          [],
          {
            #userId: userId,
            #data: data,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getUserMetadata(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserMetadata,
          [userId],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> subscribeUserMetadata(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #subscribeUserMetadata,
          [userId],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> unsubscribeUserMetadata(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeUserMetadata,
          [userId],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
}

/// A class which mocks [StreamChannelImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamChannelImpl extends _i1.Mock implements _i6.StreamChannelImpl {
  @override
  _i3.IrisMethodChannel get irisMethodChannel => (super.noSuchMethod(
        Invocation.getter(#irisMethodChannel),
        returnValue: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannel_1(
          this,
          Invocation.getter(#irisMethodChannel),
        ),
      ) as _i3.IrisMethodChannel);

  @override
  bool get isOverrideClassName => (super.noSuchMethod(
        Invocation.getter(#isOverrideClassName),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get className => (super.noSuchMethod(
        Invocation.getter(#className),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.getter(#className),
        ),
      ) as String);

  @override
  Map<String, dynamic> createParams(Map<String, dynamic>? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #createParams,
          [param],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i8.Future<int> join(_i6.JoinChannelOptions? options) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [options],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> renewToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #renewToken,
          [token],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> leave() => (super.noSuchMethod(
        Invocation.method(
          #leave,
          [],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<String> getChannelName() => (super.noSuchMethod(
        Invocation.method(
          #getChannelName,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getChannelName,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getChannelName,
            [],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<int> joinTopic({
    required String? topic,
    required _i6.JoinTopicOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinTopic,
          [],
          {
            #topic: topic,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> publishTopicMessage({
    required String? topic,
    required String? message,
    required int? length,
    required _i12.TopicMessageOptions? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishTopicMessage,
          [],
          {
            #topic: topic,
            #message: message,
            #length: length,
            #option: option,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> leaveTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #leaveTopic,
          [topic],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> subscribeTopic({
    required String? topic,
    required _i6.TopicOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeTopic,
          [],
          {
            #topic: topic,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> unsubscribeTopic({
    required String? topic,
    required _i6.TopicOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeTopic,
          [],
          {
            #topic: topic,
            #options: options,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> getSubscribedUserList(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #getSubscribedUserList,
          [topic],
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<void> release() => (super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<int> publishTextMessage({
    required String? topic,
    required String? message,
    required int? length,
    required _i12.TopicMessageOptions? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishTextMessage,
          [],
          {
            #topic: topic,
            #message: message,
            #length: length,
            #option: option,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);

  @override
  _i8.Future<int> publishBinaryMessage({
    required String? topic,
    required _i13.Uint8List? message,
    required int? length,
    required _i12.TopicMessageOptions? option,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publishBinaryMessage,
          [],
          {
            #topic: topic,
            #message: message,
            #length: length,
            #option: option,
          },
        ),
        returnValue: _i8.Future<int>.value(0),
        returnValueForMissingStub: _i8.Future<int>.value(0),
      ) as _i8.Future<int>);
}

/// A class which mocks [RtmResultHandlerImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRtmResultHandlerImpl extends _i1.Mock
    implements _i14.RtmResultHandlerImpl {
  @override
  _i7.RtmEventHandler get rtmEventHandler => (super.noSuchMethod(
        Invocation.getter(#rtmEventHandler),
        returnValue: _FakeRtmEventHandler_7(
          this,
          Invocation.getter(#rtmEventHandler),
        ),
        returnValueForMissingStub: _FakeRtmEventHandler_7(
          this,
          Invocation.getter(#rtmEventHandler),
        ),
      ) as _i7.RtmEventHandler);

  @override
  set rtmEventHandler(_i7.RtmEventHandler? _rtmEventHandler) =>
      super.noSuchMethod(
        Invocation.setter(
          #rtmEventHandler,
          _rtmEventHandler,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<T> request<T>(int? requestId) => (super.noSuchMethod(
        Invocation.method(
          #request,
          [requestId],
        ),
        returnValue: _i10.ifNotNull(
              _i10.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #request,
                  [requestId],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #request,
                [requestId],
              ),
            ),
        returnValueForMissingStub: _i10.ifNotNull(
              _i10.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #request,
                  [requestId],
                ),
              ),
              (T v) => _i8.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #request,
                [requestId],
              ),
            ),
      ) as _i8.Future<T>);

  @override
  void response(
    int? requestId,
    (Object, _i12.RtmErrorCode)? data,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #response,
          [
            requestId,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLinkStateEvent(_i11.LinkStateEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onLinkStateEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMessageEvent(_i11.MessageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onMessageEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPresenceEvent(_i11.PresenceEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onPresenceEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTopicEvent(_i11.TopicEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onTopicEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLockEvent(_i11.LockEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onLockEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onStorageEvent(_i11.StorageEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onStorageEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onConnectionStateChanged(
    String? channelName,
    _i12.RtmConnectionState? state,
    _i12.RtmConnectionChangeReason? reason,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onConnectionStateChanged,
          [
            channelName,
            state,
            reason,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTokenPrivilegeWillExpire(String? channelName) => super.noSuchMethod(
        Invocation.method(
          #onTokenPrivilegeWillExpire,
          [channelName],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setListener(
    String? key,
    Object? listener,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setListener,
          [
            key,
            listener,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(String? key) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onJoinResult(
    int? requestId,
    String? channelName,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onJoinResult,
          [
            requestId,
            channelName,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLeaveResult(
    int? requestId,
    String? channelName,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onLeaveResult,
          [
            requestId,
            channelName,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPublishTopicMessageResult(
    int? requestId,
    String? channelName,
    String? topic,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPublishTopicMessageResult,
          [
            requestId,
            channelName,
            topic,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onJoinTopicResult(
    int? requestId,
    String? channelName,
    String? userId,
    String? topic,
    String? meta,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onJoinTopicResult,
          [
            requestId,
            channelName,
            userId,
            topic,
            meta,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLeaveTopicResult(
    int? requestId,
    String? channelName,
    String? userId,
    String? topic,
    String? meta,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onLeaveTopicResult,
          [
            requestId,
            channelName,
            userId,
            topic,
            meta,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSubscribeTopicResult(
    int? requestId,
    String? channelName,
    String? userId,
    String? topic,
    _i12.UserList? succeedUsers,
    _i12.UserList? failedUsers,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSubscribeTopicResult,
          [
            requestId,
            channelName,
            userId,
            topic,
            succeedUsers,
            failedUsers,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUnsubscribeTopicResult(
    int? requestId,
    String? channelName,
    String? topic,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onUnsubscribeTopicResult,
          [
            requestId,
            channelName,
            topic,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGetSubscribedUserListResult(
    int? requestId,
    String? channelName,
    String? topic,
    _i12.UserList? users,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetSubscribedUserListResult,
          [
            requestId,
            channelName,
            topic,
            users,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSubscribeResult(
    int? requestId,
    String? channelName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSubscribeResult,
          [
            requestId,
            channelName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUnsubscribeResult(
    int? requestId,
    String? channelName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onUnsubscribeResult,
          [
            requestId,
            channelName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPublishResult(
    int? requestId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPublishResult,
          [
            requestId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLoginResult(
    int? requestId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onLoginResult,
          [
            requestId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onLogoutResult(
    int? requestId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onLogoutResult,
          [
            requestId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRenewTokenResult(
    int? requestId,
    _i12.RtmServiceType? serverType,
    String? channelName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRenewTokenResult,
          [
            requestId,
            serverType,
            channelName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSetChannelMetadataResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSetChannelMetadataResult,
          [
            requestId,
            channelName,
            channelType,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUpdateChannelMetadataResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onUpdateChannelMetadataResult,
          [
            requestId,
            channelName,
            channelType,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveChannelMetadataResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRemoveChannelMetadataResult,
          [
            requestId,
            channelName,
            channelType,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGetChannelMetadataResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    _i6.Metadata? data,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetChannelMetadataResult,
          [
            requestId,
            channelName,
            channelType,
            data,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSetUserMetadataResult(
    int? requestId,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSetUserMetadataResult,
          [
            requestId,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUpdateUserMetadataResult(
    int? requestId,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onUpdateUserMetadataResult,
          [
            requestId,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveUserMetadataResult(
    int? requestId,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRemoveUserMetadataResult,
          [
            requestId,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGetUserMetadataResult(
    int? requestId,
    String? userId,
    _i6.Metadata? data,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetUserMetadataResult,
          [
            requestId,
            userId,
            data,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSubscribeUserMetadataResult(
    int? requestId,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSubscribeUserMetadataResult,
          [
            requestId,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUnsubscribeUserMetadataResult(
    int? requestId,
    String? userId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onUnsubscribeUserMetadataResult,
          [
            requestId,
            userId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onSetLockResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    String? lockName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onSetLockResult,
          [
            requestId,
            channelName,
            channelType,
            lockName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveLockResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    String? lockName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRemoveLockResult,
          [
            requestId,
            channelName,
            channelType,
            lockName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onReleaseLockResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    String? lockName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onReleaseLockResult,
          [
            requestId,
            channelName,
            channelType,
            lockName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAcquireLockResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    String? lockName,
    _i12.RtmErrorCode? errorCode,
    String? errorDetails,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onAcquireLockResult,
          [
            requestId,
            channelName,
            channelType,
            lockName,
            errorCode,
            errorDetails,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRevokeLockResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    String? lockName,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onRevokeLockResult,
          [
            requestId,
            channelName,
            channelType,
            lockName,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGetLocksResult(
    int? requestId,
    String? channelName,
    _i12.RtmChannelType? channelType,
    List<_i12.LockDetail>? lockDetailList,
    int? count,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetLocksResult,
          [
            requestId,
            channelName,
            channelType,
            lockDetailList,
            count,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onWhoNowResult(
    int? requestId,
    List<_i12.UserState>? userStateList,
    int? count,
    String? nextPage,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onWhoNowResult,
          [
            requestId,
            userStateList,
            count,
            nextPage,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGetOnlineUsersResult(
    int? requestId,
    List<_i12.UserState>? userStateList,
    int? count,
    String? nextPage,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetOnlineUsersResult,
          [
            requestId,
            userStateList,
            count,
            nextPage,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onWhereNowResult(
    int? requestId,
    List<_i12.ChannelInfo>? channels,
    int? count,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onWhereNowResult,
          [
            requestId,
            channels,
            count,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onGetUserChannelsResult(
    int? requestId,
    _i12.ChannelInfo? channels,
    int? count,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onGetUserChannelsResult,
          [
            requestId,
            channels,
            count,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPresenceSetStateResult(
    int? requestId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPresenceSetStateResult,
          [
            requestId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPresenceRemoveStateResult(
    int? requestId,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPresenceRemoveStateResult,
          [
            requestId,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPresenceGetStateResult(
    int? requestId,
    _i12.UserState? state,
    _i12.RtmErrorCode? errorCode,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onPresenceGetStateResult,
          [
            requestId,
            state,
            errorCode,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IrisMethodChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockIrisMethodChannel extends _i1.Mock implements _i3.IrisMethodChannel {
  @override
  _i3.ScopedObjects get scopedEventHandlers => (super.noSuchMethod(
        Invocation.getter(#scopedEventHandlers),
        returnValue: _FakeScopedObjects_9(
          this,
          Invocation.getter(#scopedEventHandlers),
        ),
        returnValueForMissingStub: _FakeScopedObjects_9(
          this,
          Invocation.getter(#scopedEventHandlers),
        ),
      ) as _i3.ScopedObjects);

  @override
  _i8.Future<_i3.InitilizationResult?> initilize(
          List<_i3.InitilizationArgProvider>? args) =>
      (super.noSuchMethod(
        Invocation.method(
          #initilize,
          [args],
        ),
        returnValue: _i8.Future<_i3.InitilizationResult?>.value(),
        returnValueForMissingStub: _i8.Future<_i3.InitilizationResult?>.value(),
      ) as _i8.Future<_i3.InitilizationResult?>);

  @override
  _i8.Future<_i3.CallApiResult> invokeMethod(_i3.IrisMethodCall? methodCall) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethod,
          [methodCall],
        ),
        returnValue: _i8.Future<_i3.CallApiResult>.value(_FakeCallApiResult_10(
          this,
          Invocation.method(
            #invokeMethod,
            [methodCall],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.CallApiResult>.value(_FakeCallApiResult_10(
          this,
          Invocation.method(
            #invokeMethod,
            [methodCall],
          ),
        )),
      ) as _i8.Future<_i3.CallApiResult>);

  @override
  _i8.Future<List<_i3.CallApiResult>> invokeMethodList(
          List<_i3.IrisMethodCall>? methodCalls) =>
      (super.noSuchMethod(
        Invocation.method(
          #invokeMethodList,
          [methodCalls],
        ),
        returnValue:
            _i8.Future<List<_i3.CallApiResult>>.value(<_i3.CallApiResult>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.CallApiResult>>.value(<_i3.CallApiResult>[]),
      ) as _i8.Future<List<_i3.CallApiResult>>);

  @override
  _i8.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i3.CallApiResult> registerEventHandler(
    _i3.ScopedEvent? scopedEvent,
    String? params,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerEventHandler,
          [
            scopedEvent,
            params,
          ],
        ),
        returnValue: _i8.Future<_i3.CallApiResult>.value(_FakeCallApiResult_10(
          this,
          Invocation.method(
            #registerEventHandler,
            [
              scopedEvent,
              params,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.CallApiResult>.value(_FakeCallApiResult_10(
          this,
          Invocation.method(
            #registerEventHandler,
            [
              scopedEvent,
              params,
            ],
          ),
        )),
      ) as _i8.Future<_i3.CallApiResult>);

  @override
  _i8.Future<_i3.CallApiResult> unregisterEventHandler(
    _i3.ScopedEvent? scopedEvent,
    String? params,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unregisterEventHandler,
          [
            scopedEvent,
            params,
          ],
        ),
        returnValue: _i8.Future<_i3.CallApiResult>.value(_FakeCallApiResult_10(
          this,
          Invocation.method(
            #unregisterEventHandler,
            [
              scopedEvent,
              params,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i3.CallApiResult>.value(_FakeCallApiResult_10(
          this,
          Invocation.method(
            #unregisterEventHandler,
            [
              scopedEvent,
              params,
            ],
          ),
        )),
      ) as _i8.Future<_i3.CallApiResult>);

  @override
  _i8.Future<void> unregisterEventHandlers(_i3.TypedScopedKey? scopedKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #unregisterEventHandlers,
          [scopedKey],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  int getApiEngineHandle() => (super.noSuchMethod(
        Invocation.method(
          #getApiEngineHandle,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i15.VoidCallback addHotRestartListener(_i3.HotRestartListener? listener) =>
      (super.noSuchMethod(
        Invocation.method(
          #addHotRestartListener,
          [listener],
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i15.VoidCallback);

  @override
  void removeHotRestartListener(_i3.HotRestartListener? listener) =>
      super.noSuchMethod(
        Invocation.method(
          #removeHotRestartListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.IrisMethodChannelInternal getIrisMethodChannelInternal() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIrisMethodChannelInternal,
          [],
        ),
        returnValue: _FakeIrisMethodChannelInternal_11(
          this,
          Invocation.method(
            #getIrisMethodChannelInternal,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeIrisMethodChannelInternal_11(
          this,
          Invocation.method(
            #getIrisMethodChannelInternal,
            [],
          ),
        ),
      ) as _i3.IrisMethodChannelInternal);
}
